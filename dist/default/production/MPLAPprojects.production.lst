

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Feb 05 22:06:59 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    27   000000                     
    28                           ; Generated 23/03/2023 GMT
    29                           ; 
    30                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution. Publication is not required when
    44                           ;        this file is used in an embedded application.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F4620 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62   000000                     
    63                           	psect	idataCOMRAM
    64   001C4E                     __pidataCOMRAM:
    65                           	callstack 0
    66                           
    67                           ;initializer for _port_registers
    68   001C4E  80                 	db	128
    69   001C4F  0F                 	db	15
    70   001C50  81                 	db	129
    71   001C51  0F                 	db	15
    72   001C52  82                 	db	130
    73   001C53  0F                 	db	15
    74   001C54  83                 	db	131
    75   001C55  0F                 	db	15
    76   001C56  84                 	db	132
    77   001C57  0F                 	db	15
    78                           
    79                           ;initializer for _lat_registers
    80   001C58  89                 	db	137
    81   001C59  0F                 	db	15
    82   001C5A  8A                 	db	138
    83   001C5B  0F                 	db	15
    84   001C5C  8B                 	db	139
    85   001C5D  0F                 	db	15
    86   001C5E  8C                 	db	140
    87   001C5F  0F                 	db	15
    88   001C60  8D                 	db	141
    89   001C61  0F                 	db	15
    90                           
    91                           ;initializer for _tris_registers
    92   001C62  92                 	db	146
    93   001C63  0F                 	db	15
    94   001C64  93                 	db	147
    95   001C65  0F                 	db	15
    96   001C66  94                 	db	148
    97   001C67  0F                 	db	15
    98   001C68  95                 	db	149
    99   001C69  0F                 	db	15
   100   001C6A  96                 	db	150
   101   001C6B  0F                 	db	15
   102                           
   103                           ;initializer for _seg
   104   001C6C  02                 	db	2
   105   001C6D  0A                 	db	10
   106   001C6E  12                 	db	18
   107   001C6F  1A                 	db	26
   108   001C70  00                 	db	0
   109                           
   110                           ;initializer for _reset
   111   001C71  BA                 	db	186
   112   001C72  00                 	db	0
   113   001C73  01                 	db	1
   114                           
   115                           ;initializer for _pause
   116   001C74  B2                 	db	178
   117   001C75  00                 	db	0
   118   001C76  01                 	db	1
   119                           
   120                           ;initializer for _speed_up
   121   001C77  AA                 	db	170
   122   001C78  00                 	db	0
   123   001C79  01                 	db	1
   124                           
   125                           ;initializer for _stop
   126   001C7A  B3                 	db	179
   127   001C7B  00                 	db	0
   128   001C7C  01                 	db	1
   129                           
   130                           ;initializer for _start
   131   001C7D  A2                 	db	162
   132   001C7E  00                 	db	0
   133   001C7F  01                 	db	1
   134                           
   135                           ;initializer for _control_6
   136   001C80  2B                 	db	43
   137                           
   138                           ;initializer for _control_5
   139   001C81  23                 	db	35
   140                           
   141                           ;initializer for _control_4
   142   001C82  1B                 	db	27
   143                           
   144                           ;initializer for _control_3
   145   001C83  13                 	db	19
   146                           
   147                           ;initializer for _control_2
   148   001C84  0B                 	db	11
   149                           
   150                           ;initializer for _control_1
   151   001C85  03                 	db	3
   152                           
   153                           	psect	smallconst
   154   001000                     __psmallconst:
   155                           	callstack 0
   156   001000  00                 	db	0
   157   001001                     _keypad_values:
   158                           	callstack 0
   159   001001  37                 	db	55
   160   001002  38                 	db	56
   161   001003  39                 	db	57
   162   001004  2F                 	db	47
   163   001005  34                 	db	52
   164   001006  35                 	db	53
   165   001007  36                 	db	54
   166   001008  2A                 	db	42
   167   001009  31                 	db	49
   168   00100A  32                 	db	50
   169   00100B  33                 	db	51
   170   00100C  2D                 	db	45
   171   00100D  23                 	db	35
   172   00100E  30                 	db	48
   173   00100F  3D                 	db	61
   174   001010  2B                 	db	43
   175   001011                     __end_of_keypad_values:
   176                           	callstack 0
   177   001011  00                 	db	0	; dummy byte at the end
   178   000000                     
   179                           	psect	nvCOMRAM
   180   000061                     __pnvCOMRAM:
   181                           	callstack 0
   182   000061                     _ret:
   183                           	callstack 0
   184   000061                     	ds	1
   185   000000                     _PORTE	set	3972
   186   000000                     _PORTD	set	3971
   187   000000                     _PORTC	set	3970
   188   000000                     _PORTB	set	3969
   189   000000                     _PORTA	set	3968
   190   000000                     _LATA	set	3977
   191   000000                     _TRISA	set	3986
   192   000000                     _TRISE	set	3990
   193   000000                     _TRISD	set	3989
   194   000000                     _TRISC	set	3988
   195   000000                     _TRISB	set	3987
   196   000000                     _LATE	set	3981
   197   000000                     _LATD	set	3980
   198   000000                     _LATC	set	3979
   199   000000                     _LATB	set	3978
   200                           
   201                           ; #config settings
   202                           
   203                           	psect	cinit
   204   001C86                     __pcinit:
   205                           	callstack 0
   206   001C86                     start_initialization:
   207                           	callstack 0
   208   001C86                     __initialization:
   209                           	callstack 0
   210                           
   211                           ; Initialize objects allocated to COMRAM (56 bytes)
   212                           ; load TBLPTR registers with __pidataCOMRAM
   213   001C86  0E4E               	movlw	low __pidataCOMRAM
   214   001C88  6EF6               	movwf	tblptrl,c
   215   001C8A  0E1C               	movlw	high __pidataCOMRAM
   216   001C8C  6EF7               	movwf	tblptrh,c
   217   001C8E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   218   001C90  6EF8               	movwf	tblptru,c
   219   001C92  EE00  F001         	lfsr	0,__pdataCOMRAM
   220   001C96  EE10 F038          	lfsr	1,56
   221   001C9A                     copy_data0:
   222   001C9A  0009               	tblrd		*+
   223   001C9C  CFF5 FFEE          	movff	tablat,postinc0
   224   001CA0  50E5               	movf	postdec1,w,c
   225   001CA2  50E1               	movf	fsr1l,w,c
   226   001CA4  E1FA               	bnz	copy_data0
   227                           
   228                           ; Clear objects allocated to COMRAM (20 bytes)
   229   001CA6  EE00  F039         	lfsr	0,__pbssCOMRAM
   230   001CAA  0E14               	movlw	20
   231   001CAC                     clear_0:
   232   001CAC  6AEE               	clrf	postinc0,c
   233   001CAE  06E8               	decf	wreg,f,c
   234   001CB0  E1FD               	bnz	clear_0
   235   001CB2                     end_of_initialization:
   236                           	callstack 0
   237   001CB2                     __end_of__initialization:
   238                           	callstack 0
   239   001CB2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   240   001CB4  6EF8               	movwf	tblptru,c
   241   001CB6  0100               	movlb	0
   242   001CB8  EF09  F008         	goto	_main	;jump to C main() function
   243                           
   244                           	psect	bssCOMRAM
   245   000039                     __pbssCOMRAM:
   246                           	callstack 0
   247   000039                     Relay_turn_off@F2900:
   248                           	callstack 0
   249   000039                     	ds	1
   250   00003A                     Relay_turn_on@F2895:
   251                           	callstack 0
   252   00003A                     	ds	1
   253   00003B                     Relay_initialize@F2890:
   254                           	callstack 0
   255   00003B                     	ds	1
   256   00003C                     led_toggle@F2909:
   257                           	callstack 0
   258   00003C                     	ds	1
   259   00003D                     led_turn_off@F2904:
   260                           	callstack 0
   261   00003D                     	ds	1
   262   00003E                     led_turn_on@F2899:
   263                           	callstack 0
   264   00003E                     	ds	1
   265   00003F                     led_initialize@F2894:
   266                           	callstack 0
   267   00003F                     	ds	1
   268   000040                     dc_motor_stop@F2916:
   269                           	callstack 0
   270   000040                     	ds	1
   271   000041                     dc_motor_stop@F2914:
   272                           	callstack 0
   273   000041                     	ds	1
   274   000042                     dc_motor_move_left@F2909:
   275                           	callstack 0
   276   000042                     	ds	1
   277   000043                     dc_motor_move_left@F2907:
   278                           	callstack 0
   279   000043                     	ds	1
   280   000044                     dc_motor_move_right@F2902:
   281                           	callstack 0
   282   000044                     	ds	1
   283   000045                     dc_motor_move_right@F2900:
   284                           	callstack 0
   285   000045                     	ds	1
   286   000046                     dc_motor_intitialize@F2895:
   287                           	callstack 0
   288   000046                     	ds	1
   289   000047                     dc_motor_intitialize@F2893:
   290                           	callstack 0
   291   000047                     	ds	1
   292   000048                     _speed_state:
   293                           	callstack 0
   294   000048                     	ds	1
   295   000049                     _pause_state:
   296                           	callstack 0
   297   000049                     	ds	1
   298   00004A                     _reset_state:
   299                           	callstack 0
   300   00004A                     	ds	1
   301   00004B                     _stop_state:
   302                           	callstack 0
   303   00004B                     	ds	1
   304   00004C                     _start_state:
   305                           	callstack 0
   306   00004C                     	ds	1
   307                           
   308                           	psect	dataCOMRAM
   309   000001                     __pdataCOMRAM:
   310                           	callstack 0
   311   000001                     _port_registers:
   312                           	callstack 0
   313   000001                     	ds	10
   314   00000B                     _lat_registers:
   315                           	callstack 0
   316   00000B                     	ds	10
   317   000015                     _tris_registers:
   318                           	callstack 0
   319   000015                     	ds	10
   320   00001F                     _seg:
   321                           	callstack 0
   322   00001F                     	ds	5
   323   000024                     _reset:
   324                           	callstack 0
   325   000024                     	ds	3
   326   000027                     _pause:
   327                           	callstack 0
   328   000027                     	ds	3
   329   00002A                     _speed_up:
   330                           	callstack 0
   331   00002A                     	ds	3
   332   00002D                     _stop:
   333                           	callstack 0
   334   00002D                     	ds	3
   335   000030                     _start:
   336                           	callstack 0
   337   000030                     	ds	3
   338   000033                     _control_6:
   339                           	callstack 0
   340   000033                     	ds	1
   341   000034                     _control_5:
   342                           	callstack 0
   343   000034                     	ds	1
   344   000035                     _control_4:
   345                           	callstack 0
   346   000035                     	ds	1
   347   000036                     _control_3:
   348                           	callstack 0
   349   000036                     	ds	1
   350   000037                     _control_2:
   351                           	callstack 0
   352   000037                     	ds	1
   353   000038                     _control_1:
   354                           	callstack 0
   355   000038                     	ds	1
   356                           
   357                           	psect	cstackCOMRAM
   358   00004D                     __pcstackCOMRAM:
   359                           	callstack 0
   360   00004D                     ?___awdiv:
   361                           	callstack 0
   362   00004D                     ?___awmod:
   363                           	callstack 0
   364   00004D                     gpio_pin_direction_initialize@_pin_config:
   365                           	callstack 0
   366   00004D                     gpio_pin_write_logic@_pin_config:
   367                           	callstack 0
   368   00004D                     gpio_pin_read_logic@_pin_config:
   369                           	callstack 0
   370   00004D                     ___awdiv@dividend:
   371                           	callstack 0
   372   00004D                     ___awmod@dividend:
   373                           	callstack 0
   374                           
   375                           ; 2 bytes @ 0x0
   376   00004D                     	ds	1
   377   00004E                     ??_gpio_pin_direction_initialize:
   378   00004E                     gpio_pin_write_logic@logic:
   379                           	callstack 0
   380   00004E                     gpio_pin_read_logic@logic:
   381                           	callstack 0
   382                           
   383                           ; 1 bytes @ 0x1
   384   00004E                     	ds	1
   385   00004F                     ??_gpio_pin_write_logic:
   386   00004F                     ??_gpio_pin_read_logic:
   387   00004F                     ___awdiv@divisor:
   388                           	callstack 0
   389   00004F                     ___awmod@divisor:
   390                           	callstack 0
   391                           
   392                           ; 2 bytes @ 0x2
   393   00004F                     	ds	2
   394   000051                     ___awdiv@counter:
   395                           	callstack 0
   396   000051                     ___awmod@counter:
   397                           	callstack 0
   398                           
   399                           ; 1 bytes @ 0x4
   400   000051                     	ds	1
   401   000052                     ___awdiv@sign:
   402                           	callstack 0
   403   000052                     ___awmod@sign:
   404                           	callstack 0
   405                           
   406                           ; 1 bytes @ 0x5
   407   000052                     	ds	1
   408   000053                     Button_initialize@btn:
   409                           	callstack 0
   410   000053                     ___awdiv@quotient:
   411                           	callstack 0
   412                           
   413                           ; 2 bytes @ 0x6
   414   000053                     	ds	1
   415   000054                     Button_initialize@ret:
   416                           	callstack 0
   417   000054                     gpio_pin_write_logic@ret:
   418                           	callstack 0
   419   000054                     gpio_pin_read_logic@ret:
   420                           	callstack 0
   421                           
   422                           ; 1 bytes @ 0x7
   423   000054                     	ds	1
   424   000055                     segment_write_number@seg:
   425                           	callstack 0
   426   000055                     Button_read@btn:
   427                           	callstack 0
   428   000055                     gpio_pin_initialize@_pin_config:
   429                           	callstack 0
   430                           
   431                           ; 1 bytes @ 0x8
   432   000055                     	ds	1
   433   000056                     ??_gpio_pin_initialize:
   434   000056                     segment_write_number@number:
   435                           	callstack 0
   436   000056                     Button_read@_st:
   437                           	callstack 0
   438                           
   439                           ; 1 bytes @ 0x9
   440   000056                     	ds	1
   441   000057                     segment_inititalize@seg:
   442                           	callstack 0
   443   000057                     segment_write_number@ret:
   444                           	callstack 0
   445                           
   446                           ; 1 bytes @ 0xA
   447   000057                     	ds	1
   448   000058                     segment_inititalize@ret:
   449                           	callstack 0
   450   000058                     Button_read@ret:
   451                           	callstack 0
   452                           
   453                           ; 1 bytes @ 0xB
   454   000058                     	ds	1
   455   000059                     Button_read@button_logic:
   456                           	callstack 0
   457   000059                     application_initialize@ret:
   458                           	callstack 0
   459                           
   460                           ; 1 bytes @ 0xC
   461   000059                     	ds	1
   462   00005A                     ??_main:
   463                           
   464                           ; 1 bytes @ 0xD
   465   00005A                     	ds	1
   466   00005B                     main@counter:
   467                           	callstack 0
   468                           
   469                           ; 1 bytes @ 0xE
   470   00005B                     	ds	1
   471   00005C                     main@start_flag:
   472                           	callstack 0
   473                           
   474                           ; 1 bytes @ 0xF
   475   00005C                     	ds	1
   476   00005D                     main@delay_time:
   477                           	callstack 0
   478                           
   479                           ; 1 bytes @ 0x10
   480   00005D                     	ds	1
   481   00005E                     main@seconds:
   482                           	callstack 0
   483                           
   484                           ; 1 bytes @ 0x11
   485   00005E                     	ds	1
   486   00005F                     main@minutes:
   487                           	callstack 0
   488                           
   489                           ; 1 bytes @ 0x12
   490   00005F                     	ds	1
   491   000060                     main@hours:
   492                           	callstack 0
   493                           
   494                           ; 1 bytes @ 0x13
   495   000060                     	ds	1
   496                           
   497 ;;
   498 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   499 ;;
   500 ;; *************** function _main *****************
   501 ;; Defined at:
   502 ;;		line 139 in file "application.c"
   503 ;; Parameters:    Size  Location     Type
   504 ;;		None
   505 ;; Auto vars:     Size  Location     Type
   506 ;;  hours           1   19[COMRAM] unsigned char 
   507 ;;  minutes         1   18[COMRAM] unsigned char 
   508 ;;  seconds         1   17[COMRAM] unsigned char 
   509 ;;  delay_time      1   16[COMRAM] unsigned char 
   510 ;;  start_flag      1   15[COMRAM] unsigned char 
   511 ;;  counter         1   14[COMRAM] unsigned char 
   512 ;; Return value:  Size  Location     Type
   513 ;;                  2  578[None  ] int 
   514 ;; Registers used:
   515 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   516 ;; Tracked objects:
   517 ;;		On entry : 0/0
   518 ;;		On exit  : 0/0
   519 ;;		Unchanged: 0/0
   520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   522 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   523 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   524 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   525 ;;Total ram usage:        7 bytes
   526 ;; Hardware stack levels required when called: 4
   527 ;; This function calls:
   528 ;;		_Button_read
   529 ;;		___awdiv
   530 ;;		___awmod
   531 ;;		_application_initialize
   532 ;;		_gpio_pin_write_logic
   533 ;;		_segment_write_number
   534 ;; This function is called by:
   535 ;;		Startup code after reset
   536 ;; This function uses a non-reentrant model
   537 ;;
   538                           
   539                           	psect	text0
   540   001012                     __ptext0:
   541                           	callstack 0
   542   001012                     _main:
   543                           	callstack 27
   544   001012                     
   545                           ;application.c: 141:     application_initialize();
   546   001012  EC61  F00D         	call	_application_initialize	;wreg free
   547   001016                     
   548                           ;application.c: 142:     uint8 counter;;application.c: 143:     uint8 start_flag = 0;
   549   001016  0E00               	movlw	0
   550   001018  6E5C               	movwf	main@start_flag^0,c
   551   00101A                     
   552                           ;application.c: 144:     uint8 seconds, minutes, hours;;application.c: 145:     uint8 de
      +                          lay_time = 50;
   553   00101A  0E32               	movlw	50
   554   00101C  6E5D               	movwf	main@delay_time^0,c
   555   00101E                     l2618:
   556                           
   557                           ;application.c: 147:     {;application.c: 148:        ret = Button_read(&start, &start_s
      +                          tate);
   558   00101E  0E30               	movlw	low _start
   559   001020  6E55               	movwf	Button_read@btn^0,c
   560   001022  0E4C               	movlw	low _start_state
   561   001024  6E56               	movwf	Button_read@_st^0,c
   562   001026  EC5C  F00C         	call	_Button_read	;wreg free
   563   00102A  6E61               	movwf	_ret^0,c
   564   00102C                     
   565                           ;application.c: 149:        if(start_state == BUTTON_PRESSED)
   566   00102C  044C               	decf	_start_state^0,w,c
   567   00102E  A4D8               	btfss	status,2,c
   568   001030  EF1C  F008         	goto	u1701
   569   001034  EF1E  F008         	goto	u1700
   570   001038                     u1701:
   571   001038  EF20  F008         	goto	l2624
   572   00103C                     u1700:
   573   00103C                     
   574                           ;application.c: 150:        {;application.c: 151:            start_flag = 1;
   575   00103C  0E01               	movlw	1
   576   00103E  6E5C               	movwf	main@start_flag^0,c
   577   001040                     l2624:
   578                           
   579                           ;application.c: 153:        if(start_flag == 1)
   580   001040  045C               	decf	main@start_flag^0,w,c
   581   001042  A4D8               	btfss	status,2,c
   582   001044  EF26  F008         	goto	u1711
   583   001048  EF28  F008         	goto	u1710
   584   00104C                     u1711:
   585   00104C  EFBB  F00A         	goto	l2746
   586   001050                     u1710:
   587   001050                     
   588                           ;application.c: 154:         {;application.c: 155:             for(counter = 0; counter 
      +                          <= delay_time; counter++)
   589   001050  0E00               	movlw	0
   590   001052  6E5B               	movwf	main@counter^0,c
   591   001054  EFB2  F00A         	goto	l2744
   592   001058                     l2628:
   593                           
   594                           ;application.c: 156:             {;application.c: 158:                 _delay((unsigned 
      +                          long)((3333)*(8000000UL/4000000.0)));
   595   001058  0E09               	movlw	9
   596   00105A  6E5A               	movwf	??_main^0,c
   597   00105C  0EA7               	movlw	167
   598   00105E                     u1937:
   599   00105E  2EE8               	decfsz	wreg,f,c
   600   001060  D7FE               	bra	u1937
   601   001062  2E5A               	decfsz	??_main^0,f,c
   602   001064  D7FC               	bra	u1937
   603   001066  0000               	nop	
   604   001068                     
   605                           ;application.c: 159:                 ret = gpio_pin_write_logic(&control_1, GPIO_LOGIC_H
      +                          IGH);
   606   001068  0E38               	movlw	low _control_1
   607   00106A  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
   608   00106C  0E01               	movlw	1
   609   00106E  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
   610   001070  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
   611   001074  6E61               	movwf	_ret^0,c
   612   001076                     
   613                           ;application.c: 160:                 ret = segment_write_number(&seg, hours/10);
   614   001076  0E1F               	movlw	low _seg
   615   001078  6E55               	movwf	segment_write_number@seg^0,c
   616   00107A  C060  F04D         	movff	main@hours,___awdiv@dividend
   617   00107E  6A4E               	clrf	(___awdiv@dividend+1)^0,c
   618   001080  0E00               	movlw	0
   619   001082  6E50               	movwf	(___awdiv@divisor+1)^0,c
   620   001084  0E0A               	movlw	10
   621   001086  6E4F               	movwf	___awdiv@divisor^0,c
   622   001088  ECFA  F00B         	call	___awdiv	;wreg free
   623   00108C  504D               	movf	?___awdiv^0,w,c
   624   00108E  6E56               	movwf	segment_write_number@number^0,c
   625   001090  EC9E  F00D         	call	_segment_write_number	;wreg free
   626   001094  6E61               	movwf	_ret^0,c
   627                           
   628                           ;application.c: 161:                 _delay((unsigned long)((3333)*(8000000UL/4000000.0)
      +                          ));
   629   001096  0E09               	movlw	9
   630   001098  6E5A               	movwf	??_main^0,c
   631   00109A  0EA7               	movlw	167
   632   00109C                     u1947:
   633   00109C  2EE8               	decfsz	wreg,f,c
   634   00109E  D7FE               	bra	u1947
   635   0010A0  2E5A               	decfsz	??_main^0,f,c
   636   0010A2  D7FC               	bra	u1947
   637   0010A4  0000               	nop	
   638   0010A6                     
   639                           ;application.c: 162:                 ret = gpio_pin_write_logic(&control_1, GPIO_LOGIC_L
      +                          OW);
   640   0010A6  0E38               	movlw	low _control_1
   641   0010A8  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
   642   0010AA  0E00               	movlw	0
   643   0010AC  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
   644   0010AE  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
   645   0010B2  6E61               	movwf	_ret^0,c
   646   0010B4                     
   647                           ;application.c: 164:                 ret = gpio_pin_write_logic(&control_2, GPIO_LOGIC_H
      +                          IGH);
   648   0010B4  0E37               	movlw	low _control_2
   649   0010B6  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
   650   0010B8  0E01               	movlw	1
   651   0010BA  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
   652   0010BC  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
   653   0010C0  6E61               	movwf	_ret^0,c
   654   0010C2                     
   655                           ;application.c: 165:                 ret = segment_write_number(&seg, hours%10);
   656   0010C2  0E1F               	movlw	low _seg
   657   0010C4  6E55               	movwf	segment_write_number@seg^0,c
   658   0010C6  C060  F04D         	movff	main@hours,___awmod@dividend
   659   0010CA  6A4E               	clrf	(___awmod@dividend+1)^0,c
   660   0010CC  0E00               	movlw	0
   661   0010CE  6E50               	movwf	(___awmod@divisor+1)^0,c
   662   0010D0  0E0A               	movlw	10
   663   0010D2  6E4F               	movwf	___awmod@divisor^0,c
   664   0010D4  ECB5  F00C         	call	___awmod	;wreg free
   665   0010D8  504D               	movf	?___awmod^0,w,c
   666   0010DA  6E56               	movwf	segment_write_number@number^0,c
   667   0010DC  EC9E  F00D         	call	_segment_write_number	;wreg free
   668   0010E0  6E61               	movwf	_ret^0,c
   669   0010E2                     
   670                           ;application.c: 166:                 _delay((unsigned long)((3333)*(8000000UL/4000000.0)
      +                          ));
   671   0010E2  0E09               	movlw	9
   672   0010E4  6E5A               	movwf	??_main^0,c
   673   0010E6  0EA7               	movlw	167
   674   0010E8                     u1957:
   675   0010E8  2EE8               	decfsz	wreg,f,c
   676   0010EA  D7FE               	bra	u1957
   677   0010EC  2E5A               	decfsz	??_main^0,f,c
   678   0010EE  D7FC               	bra	u1957
   679   0010F0  0000               	nop	
   680                           
   681                           ;application.c: 167:                 ret = gpio_pin_write_logic(&control_2, GPIO_LOGIC_L
      +                          OW);
   682   0010F2  0E37               	movlw	low _control_2
   683   0010F4  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
   684   0010F6  0E00               	movlw	0
   685   0010F8  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
   686   0010FA  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
   687   0010FE  6E61               	movwf	_ret^0,c
   688                           
   689                           ;application.c: 169:                 ret = gpio_pin_write_logic(&control_3, GPIO_LOGIC_H
      +                          IGH);
   690   001100  0E36               	movlw	low _control_3
   691   001102  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
   692   001104  0E01               	movlw	1
   693   001106  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
   694   001108  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
   695   00110C  6E61               	movwf	_ret^0,c
   696                           
   697                           ;application.c: 170:                 ret = segment_write_number(&seg, minutes/10);
   698   00110E  0E1F               	movlw	low _seg
   699   001110  6E55               	movwf	segment_write_number@seg^0,c
   700   001112  C05F  F04D         	movff	main@minutes,___awdiv@dividend
   701   001116  6A4E               	clrf	(___awdiv@dividend+1)^0,c
   702   001118  0E00               	movlw	0
   703   00111A  6E50               	movwf	(___awdiv@divisor+1)^0,c
   704   00111C  0E0A               	movlw	10
   705   00111E  6E4F               	movwf	___awdiv@divisor^0,c
   706   001120  ECFA  F00B         	call	___awdiv	;wreg free
   707   001124  504D               	movf	?___awdiv^0,w,c
   708   001126  6E56               	movwf	segment_write_number@number^0,c
   709   001128  EC9E  F00D         	call	_segment_write_number	;wreg free
   710   00112C  6E61               	movwf	_ret^0,c
   711   00112E                     
   712                           ;application.c: 171:                 _delay((unsigned long)((3333)*(8000000UL/4000000.0)
      +                          ));
   713   00112E  0E09               	movlw	9
   714   001130  6E5A               	movwf	??_main^0,c
   715   001132  0EA7               	movlw	167
   716   001134                     u1967:
   717   001134  2EE8               	decfsz	wreg,f,c
   718   001136  D7FE               	bra	u1967
   719   001138  2E5A               	decfsz	??_main^0,f,c
   720   00113A  D7FC               	bra	u1967
   721   00113C  0000               	nop	
   722   00113E                     
   723                           ;application.c: 172:                 ret = gpio_pin_write_logic(&control_3, GPIO_LOGIC_L
      +                          OW);
   724   00113E  0E36               	movlw	low _control_3
   725   001140  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
   726   001142  0E00               	movlw	0
   727   001144  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
   728   001146  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
   729   00114A  6E61               	movwf	_ret^0,c
   730   00114C                     
   731                           ;application.c: 174:                 ret = gpio_pin_write_logic(&control_4, GPIO_LOGIC_H
      +                          IGH);
   732   00114C  0E35               	movlw	low _control_4
   733   00114E  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
   734   001150  0E01               	movlw	1
   735   001152  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
   736   001154  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
   737   001158  6E61               	movwf	_ret^0,c
   738   00115A                     
   739                           ;application.c: 175:                 ret = segment_write_number(&seg, minutes%10);
   740   00115A  0E1F               	movlw	low _seg
   741   00115C  6E55               	movwf	segment_write_number@seg^0,c
   742   00115E  C05F  F04D         	movff	main@minutes,___awmod@dividend
   743   001162  6A4E               	clrf	(___awmod@dividend+1)^0,c
   744   001164  0E00               	movlw	0
   745   001166  6E50               	movwf	(___awmod@divisor+1)^0,c
   746   001168  0E0A               	movlw	10
   747   00116A  6E4F               	movwf	___awmod@divisor^0,c
   748   00116C  ECB5  F00C         	call	___awmod	;wreg free
   749   001170  504D               	movf	?___awmod^0,w,c
   750   001172  6E56               	movwf	segment_write_number@number^0,c
   751   001174  EC9E  F00D         	call	_segment_write_number	;wreg free
   752   001178  6E61               	movwf	_ret^0,c
   753                           
   754                           ;application.c: 176:                 _delay((unsigned long)((3333)*(8000000UL/4000000.0)
      +                          ));
   755   00117A  0E09               	movlw	9
   756   00117C  6E5A               	movwf	??_main^0,c
   757   00117E  0EA7               	movlw	167
   758   001180                     u1977:
   759   001180  2EE8               	decfsz	wreg,f,c
   760   001182  D7FE               	bra	u1977
   761   001184  2E5A               	decfsz	??_main^0,f,c
   762   001186  D7FC               	bra	u1977
   763   001188  0000               	nop	
   764   00118A                     
   765                           ;application.c: 177:                 ret = gpio_pin_write_logic(&control_4, GPIO_LOGIC_L
      +                          OW);
   766   00118A  0E35               	movlw	low _control_4
   767   00118C  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
   768   00118E  0E00               	movlw	0
   769   001190  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
   770   001192  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
   771   001196  6E61               	movwf	_ret^0,c
   772   001198                     
   773                           ;application.c: 179:                 ret = gpio_pin_write_logic(&control_5, GPIO_LOGIC_H
      +                          IGH);
   774   001198  0E34               	movlw	low _control_5
   775   00119A  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
   776   00119C  0E01               	movlw	1
   777   00119E  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
   778   0011A0  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
   779   0011A4  6E61               	movwf	_ret^0,c
   780   0011A6                     
   781                           ;application.c: 180:                 ret = segment_write_number(&seg, seconds/10);
   782   0011A6  0E1F               	movlw	low _seg
   783   0011A8  6E55               	movwf	segment_write_number@seg^0,c
   784   0011AA  C05E  F04D         	movff	main@seconds,___awdiv@dividend
   785   0011AE  6A4E               	clrf	(___awdiv@dividend+1)^0,c
   786   0011B0  0E00               	movlw	0
   787   0011B2  6E50               	movwf	(___awdiv@divisor+1)^0,c
   788   0011B4  0E0A               	movlw	10
   789   0011B6  6E4F               	movwf	___awdiv@divisor^0,c
   790   0011B8  ECFA  F00B         	call	___awdiv	;wreg free
   791   0011BC  504D               	movf	?___awdiv^0,w,c
   792   0011BE  6E56               	movwf	segment_write_number@number^0,c
   793   0011C0  EC9E  F00D         	call	_segment_write_number	;wreg free
   794   0011C4  6E61               	movwf	_ret^0,c
   795   0011C6                     
   796                           ;application.c: 181:                 _delay((unsigned long)((3333)*(8000000UL/4000000.0)
      +                          ));
   797   0011C6  0E09               	movlw	9
   798   0011C8  6E5A               	movwf	??_main^0,c
   799   0011CA  0EA7               	movlw	167
   800   0011CC                     u1987:
   801   0011CC  2EE8               	decfsz	wreg,f,c
   802   0011CE  D7FE               	bra	u1987
   803   0011D0  2E5A               	decfsz	??_main^0,f,c
   804   0011D2  D7FC               	bra	u1987
   805   0011D4  0000               	nop	
   806                           
   807                           ;application.c: 182:                 ret = gpio_pin_write_logic(&control_5, GPIO_LOGIC_L
      +                          OW);
   808   0011D6  0E34               	movlw	low _control_5
   809   0011D8  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
   810   0011DA  0E00               	movlw	0
   811   0011DC  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
   812   0011DE  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
   813   0011E2  6E61               	movwf	_ret^0,c
   814                           
   815                           ;application.c: 184:                 ret = gpio_pin_write_logic(&control_6, GPIO_LOGIC_H
      +                          IGH);
   816   0011E4  0E33               	movlw	low _control_6
   817   0011E6  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
   818   0011E8  0E01               	movlw	1
   819   0011EA  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
   820   0011EC  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
   821   0011F0  6E61               	movwf	_ret^0,c
   822                           
   823                           ;application.c: 185:                 ret = segment_write_number(&seg, seconds%10);
   824   0011F2  0E1F               	movlw	low _seg
   825   0011F4  6E55               	movwf	segment_write_number@seg^0,c
   826   0011F6  C05E  F04D         	movff	main@seconds,___awmod@dividend
   827   0011FA  6A4E               	clrf	(___awmod@dividend+1)^0,c
   828   0011FC  0E00               	movlw	0
   829   0011FE  6E50               	movwf	(___awmod@divisor+1)^0,c
   830   001200  0E0A               	movlw	10
   831   001202  6E4F               	movwf	___awmod@divisor^0,c
   832   001204  ECB5  F00C         	call	___awmod	;wreg free
   833   001208  504D               	movf	?___awmod^0,w,c
   834   00120A  6E56               	movwf	segment_write_number@number^0,c
   835   00120C  EC9E  F00D         	call	_segment_write_number	;wreg free
   836   001210  6E61               	movwf	_ret^0,c
   837   001212                     
   838                           ;application.c: 186:                 _delay((unsigned long)((3333)*(8000000UL/4000000.0)
      +                          ));
   839   001212  0E09               	movlw	9
   840   001214  6E5A               	movwf	??_main^0,c
   841   001216  0EA7               	movlw	167
   842   001218                     u1997:
   843   001218  2EE8               	decfsz	wreg,f,c
   844   00121A  D7FE               	bra	u1997
   845   00121C  2E5A               	decfsz	??_main^0,f,c
   846   00121E  D7FC               	bra	u1997
   847   001220  0000               	nop	
   848   001222                     
   849                           ;application.c: 187:                 ret = gpio_pin_write_logic(&control_6, GPIO_LOGIC_L
      +                          OW);
   850   001222  0E33               	movlw	low _control_6
   851   001224  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
   852   001226  0E00               	movlw	0
   853   001228  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
   854   00122A  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
   855   00122E  6E61               	movwf	_ret^0,c
   856   001230                     
   857                           ;application.c: 190:                 ret = Button_read(&speed_up, &speed_state);
   858   001230  0E2A               	movlw	low _speed_up
   859   001232  6E55               	movwf	Button_read@btn^0,c
   860   001234  0E48               	movlw	low _speed_state
   861   001236  6E56               	movwf	Button_read@_st^0,c
   862   001238  EC5C  F00C         	call	_Button_read	;wreg free
   863   00123C  6E61               	movwf	_ret^0,c
   864   00123E                     
   865                           ;application.c: 191:                 if(speed_state == BUTTON_PRESSED)
   866   00123E  0448               	decf	_speed_state^0,w,c
   867   001240  A4D8               	btfss	status,2,c
   868   001242  EF25  F009         	goto	u1721
   869   001246  EF27  F009         	goto	u1720
   870   00124A                     u1721:
   871   00124A  EF2B  F009         	goto	l2668
   872   00124E                     u1720:
   873   00124E                     
   874                           ;application.c: 192:                 {;application.c: 193:                     delay_tim
      +                          e = 5;
   875   00124E  0E05               	movlw	5
   876   001250  6E5D               	movwf	main@delay_time^0,c
   877                           
   878                           ;application.c: 194:                 }
   879   001252  EF35  F009         	goto	l2672
   880   001256                     l2668:
   881   001256  5048               	movf	_speed_state^0,w,c
   882   001258  A4D8               	btfss	status,2,c
   883   00125A  EF31  F009         	goto	u1731
   884   00125E  EF33  F009         	goto	u1730
   885   001262                     u1731:
   886   001262  EF35  F009         	goto	l2672
   887   001266                     u1730:
   888   001266                     
   889                           ;application.c: 196:                 {;application.c: 197:                     delay_tim
      +                          e = 50;
   890   001266  0E32               	movlw	50
   891   001268  6E5D               	movwf	main@delay_time^0,c
   892   00126A                     l2672:
   893                           
   894                           ;application.c: 201:                 ret = Button_read(&pause, &pause_state);
   895   00126A  0E27               	movlw	low _pause
   896   00126C  6E55               	movwf	Button_read@btn^0,c
   897   00126E  0E49               	movlw	low _pause_state
   898   001270  6E56               	movwf	Button_read@_st^0,c
   899   001272  EC5C  F00C         	call	_Button_read	;wreg free
   900   001276  6E61               	movwf	_ret^0,c
   901   001278                     
   902                           ;application.c: 202:                 if(pause_state == BUTTON_PRESSED)
   903   001278  0449               	decf	_pause_state^0,w,c
   904   00127A  A4D8               	btfss	status,2,c
   905   00127C  EF42  F009         	goto	u1741
   906   001280  EF44  F009         	goto	u1740
   907   001284                     u1741:
   908   001284  EF4E  F00A         	goto	l2718
   909   001288                     u1740:
   910   001288                     l2676:
   911                           
   912                           ;application.c: 205:                     {;application.c: 206:                         _
      +                          delay((unsigned long)((3333)*(8000000UL/4000000.0)));
   913   001288  0E09               	movlw	9
   914   00128A  6E5A               	movwf	??_main^0,c
   915   00128C  0EA7               	movlw	167
   916   00128E                     u2007:
   917   00128E  2EE8               	decfsz	wreg,f,c
   918   001290  D7FE               	bra	u2007
   919   001292  2E5A               	decfsz	??_main^0,f,c
   920   001294  D7FC               	bra	u2007
   921   001296  0000               	nop	
   922   001298                     
   923                           ;application.c: 207:                         ret = gpio_pin_write_logic(&control_1, GPIO
      +                          _LOGIC_HIGH);
   924   001298  0E38               	movlw	low _control_1
   925   00129A  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
   926   00129C  0E01               	movlw	1
   927   00129E  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
   928   0012A0  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
   929   0012A4  6E61               	movwf	_ret^0,c
   930   0012A6                     
   931                           ;application.c: 208:                         ret = segment_write_number(&seg, hours/10);
   932   0012A6  0E1F               	movlw	low _seg
   933   0012A8  6E55               	movwf	segment_write_number@seg^0,c
   934   0012AA  C060  F04D         	movff	main@hours,___awdiv@dividend
   935   0012AE  6A4E               	clrf	(___awdiv@dividend+1)^0,c
   936   0012B0  0E00               	movlw	0
   937   0012B2  6E50               	movwf	(___awdiv@divisor+1)^0,c
   938   0012B4  0E0A               	movlw	10
   939   0012B6  6E4F               	movwf	___awdiv@divisor^0,c
   940   0012B8  ECFA  F00B         	call	___awdiv	;wreg free
   941   0012BC  504D               	movf	?___awdiv^0,w,c
   942   0012BE  6E56               	movwf	segment_write_number@number^0,c
   943   0012C0  EC9E  F00D         	call	_segment_write_number	;wreg free
   944   0012C4  6E61               	movwf	_ret^0,c
   945                           
   946                           ;application.c: 209:                         _delay((unsigned long)((3333)*(8000000UL/40
      +                          00000.0)));
   947   0012C6  0E09               	movlw	9
   948   0012C8  6E5A               	movwf	??_main^0,c
   949   0012CA  0EA7               	movlw	167
   950   0012CC                     u2017:
   951   0012CC  2EE8               	decfsz	wreg,f,c
   952   0012CE  D7FE               	bra	u2017
   953   0012D0  2E5A               	decfsz	??_main^0,f,c
   954   0012D2  D7FC               	bra	u2017
   955   0012D4  0000               	nop	
   956   0012D6                     
   957                           ;application.c: 210:                         ret = gpio_pin_write_logic(&control_1, GPIO
      +                          _LOGIC_LOW);
   958   0012D6  0E38               	movlw	low _control_1
   959   0012D8  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
   960   0012DA  0E00               	movlw	0
   961   0012DC  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
   962   0012DE  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
   963   0012E2  6E61               	movwf	_ret^0,c
   964   0012E4                     
   965                           ;application.c: 212:                         ret = gpio_pin_write_logic(&control_2, GPIO
      +                          _LOGIC_HIGH);
   966   0012E4  0E37               	movlw	low _control_2
   967   0012E6  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
   968   0012E8  0E01               	movlw	1
   969   0012EA  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
   970   0012EC  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
   971   0012F0  6E61               	movwf	_ret^0,c
   972   0012F2                     
   973                           ;application.c: 213:                         ret = segment_write_number(&seg, hours%10);
   974   0012F2  0E1F               	movlw	low _seg
   975   0012F4  6E55               	movwf	segment_write_number@seg^0,c
   976   0012F6  C060  F04D         	movff	main@hours,___awmod@dividend
   977   0012FA  6A4E               	clrf	(___awmod@dividend+1)^0,c
   978   0012FC  0E00               	movlw	0
   979   0012FE  6E50               	movwf	(___awmod@divisor+1)^0,c
   980   001300  0E0A               	movlw	10
   981   001302  6E4F               	movwf	___awmod@divisor^0,c
   982   001304  ECB5  F00C         	call	___awmod	;wreg free
   983   001308  504D               	movf	?___awmod^0,w,c
   984   00130A  6E56               	movwf	segment_write_number@number^0,c
   985   00130C  EC9E  F00D         	call	_segment_write_number	;wreg free
   986   001310  6E61               	movwf	_ret^0,c
   987   001312                     
   988                           ;application.c: 214:                         _delay((unsigned long)((3333)*(8000000UL/40
      +                          00000.0)));
   989   001312  0E09               	movlw	9
   990   001314  6E5A               	movwf	??_main^0,c
   991   001316  0EA7               	movlw	167
   992   001318                     u2027:
   993   001318  2EE8               	decfsz	wreg,f,c
   994   00131A  D7FE               	bra	u2027
   995   00131C  2E5A               	decfsz	??_main^0,f,c
   996   00131E  D7FC               	bra	u2027
   997   001320  0000               	nop	
   998                           
   999                           ;application.c: 215:                         ret = gpio_pin_write_logic(&control_2, GPIO
      +                          _LOGIC_LOW);
  1000   001322  0E37               	movlw	low _control_2
  1001   001324  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1002   001326  0E00               	movlw	0
  1003   001328  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1004   00132A  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1005   00132E  6E61               	movwf	_ret^0,c
  1006                           
  1007                           ;application.c: 217:                         ret = gpio_pin_write_logic(&control_3, GPIO
      +                          _LOGIC_HIGH);
  1008   001330  0E36               	movlw	low _control_3
  1009   001332  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1010   001334  0E01               	movlw	1
  1011   001336  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1012   001338  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1013   00133C  6E61               	movwf	_ret^0,c
  1014                           
  1015                           ;application.c: 218:                         ret = segment_write_number(&seg, minutes/10
      +                          );
  1016   00133E  0E1F               	movlw	low _seg
  1017   001340  6E55               	movwf	segment_write_number@seg^0,c
  1018   001342  C05F  F04D         	movff	main@minutes,___awdiv@dividend
  1019   001346  6A4E               	clrf	(___awdiv@dividend+1)^0,c
  1020   001348  0E00               	movlw	0
  1021   00134A  6E50               	movwf	(___awdiv@divisor+1)^0,c
  1022   00134C  0E0A               	movlw	10
  1023   00134E  6E4F               	movwf	___awdiv@divisor^0,c
  1024   001350  ECFA  F00B         	call	___awdiv	;wreg free
  1025   001354  504D               	movf	?___awdiv^0,w,c
  1026   001356  6E56               	movwf	segment_write_number@number^0,c
  1027   001358  EC9E  F00D         	call	_segment_write_number	;wreg free
  1028   00135C  6E61               	movwf	_ret^0,c
  1029   00135E                     
  1030                           ;application.c: 219:                         _delay((unsigned long)((3333)*(8000000UL/40
      +                          00000.0)));
  1031   00135E  0E09               	movlw	9
  1032   001360  6E5A               	movwf	??_main^0,c
  1033   001362  0EA7               	movlw	167
  1034   001364                     u2037:
  1035   001364  2EE8               	decfsz	wreg,f,c
  1036   001366  D7FE               	bra	u2037
  1037   001368  2E5A               	decfsz	??_main^0,f,c
  1038   00136A  D7FC               	bra	u2037
  1039   00136C  0000               	nop	
  1040   00136E                     
  1041                           ;application.c: 220:                         ret = gpio_pin_write_logic(&control_3, GPIO
      +                          _LOGIC_LOW);
  1042   00136E  0E36               	movlw	low _control_3
  1043   001370  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1044   001372  0E00               	movlw	0
  1045   001374  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1046   001376  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1047   00137A  6E61               	movwf	_ret^0,c
  1048   00137C                     
  1049                           ;application.c: 222:                         ret = gpio_pin_write_logic(&control_4, GPIO
      +                          _LOGIC_HIGH);
  1050   00137C  0E35               	movlw	low _control_4
  1051   00137E  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1052   001380  0E01               	movlw	1
  1053   001382  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1054   001384  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1055   001388  6E61               	movwf	_ret^0,c
  1056   00138A                     
  1057                           ;application.c: 223:                         ret = segment_write_number(&seg, minutes%10
      +                          );
  1058   00138A  0E1F               	movlw	low _seg
  1059   00138C  6E55               	movwf	segment_write_number@seg^0,c
  1060   00138E  C05F  F04D         	movff	main@minutes,___awmod@dividend
  1061   001392  6A4E               	clrf	(___awmod@dividend+1)^0,c
  1062   001394  0E00               	movlw	0
  1063   001396  6E50               	movwf	(___awmod@divisor+1)^0,c
  1064   001398  0E0A               	movlw	10
  1065   00139A  6E4F               	movwf	___awmod@divisor^0,c
  1066   00139C  ECB5  F00C         	call	___awmod	;wreg free
  1067   0013A0  504D               	movf	?___awmod^0,w,c
  1068   0013A2  6E56               	movwf	segment_write_number@number^0,c
  1069   0013A4  EC9E  F00D         	call	_segment_write_number	;wreg free
  1070   0013A8  6E61               	movwf	_ret^0,c
  1071                           
  1072                           ;application.c: 224:                         _delay((unsigned long)((3333)*(8000000UL/40
      +                          00000.0)));
  1073   0013AA  0E09               	movlw	9
  1074   0013AC  6E5A               	movwf	??_main^0,c
  1075   0013AE  0EA7               	movlw	167
  1076   0013B0                     u2047:
  1077   0013B0  2EE8               	decfsz	wreg,f,c
  1078   0013B2  D7FE               	bra	u2047
  1079   0013B4  2E5A               	decfsz	??_main^0,f,c
  1080   0013B6  D7FC               	bra	u2047
  1081   0013B8  0000               	nop	
  1082   0013BA                     
  1083                           ;application.c: 225:                         ret = gpio_pin_write_logic(&control_4, GPIO
      +                          _LOGIC_LOW);
  1084   0013BA  0E35               	movlw	low _control_4
  1085   0013BC  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1086   0013BE  0E00               	movlw	0
  1087   0013C0  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1088   0013C2  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1089   0013C6  6E61               	movwf	_ret^0,c
  1090   0013C8                     
  1091                           ;application.c: 227:                         ret = gpio_pin_write_logic(&control_5, GPIO
      +                          _LOGIC_HIGH);
  1092   0013C8  0E34               	movlw	low _control_5
  1093   0013CA  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1094   0013CC  0E01               	movlw	1
  1095   0013CE  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1096   0013D0  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1097   0013D4  6E61               	movwf	_ret^0,c
  1098   0013D6                     
  1099                           ;application.c: 228:                         ret = segment_write_number(&seg, seconds/10
      +                          );
  1100   0013D6  0E1F               	movlw	low _seg
  1101   0013D8  6E55               	movwf	segment_write_number@seg^0,c
  1102   0013DA  C05E  F04D         	movff	main@seconds,___awdiv@dividend
  1103   0013DE  6A4E               	clrf	(___awdiv@dividend+1)^0,c
  1104   0013E0  0E00               	movlw	0
  1105   0013E2  6E50               	movwf	(___awdiv@divisor+1)^0,c
  1106   0013E4  0E0A               	movlw	10
  1107   0013E6  6E4F               	movwf	___awdiv@divisor^0,c
  1108   0013E8  ECFA  F00B         	call	___awdiv	;wreg free
  1109   0013EC  504D               	movf	?___awdiv^0,w,c
  1110   0013EE  6E56               	movwf	segment_write_number@number^0,c
  1111   0013F0  EC9E  F00D         	call	_segment_write_number	;wreg free
  1112   0013F4  6E61               	movwf	_ret^0,c
  1113   0013F6                     
  1114                           ;application.c: 229:                         _delay((unsigned long)((3333)*(8000000UL/40
      +                          00000.0)));
  1115   0013F6  0E09               	movlw	9
  1116   0013F8  6E5A               	movwf	??_main^0,c
  1117   0013FA  0EA7               	movlw	167
  1118   0013FC                     u2057:
  1119   0013FC  2EE8               	decfsz	wreg,f,c
  1120   0013FE  D7FE               	bra	u2057
  1121   001400  2E5A               	decfsz	??_main^0,f,c
  1122   001402  D7FC               	bra	u2057
  1123   001404  0000               	nop	
  1124                           
  1125                           ;application.c: 230:                         ret = gpio_pin_write_logic(&control_5, GPIO
      +                          _LOGIC_LOW);
  1126   001406  0E34               	movlw	low _control_5
  1127   001408  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1128   00140A  0E00               	movlw	0
  1129   00140C  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1130   00140E  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1131   001412  6E61               	movwf	_ret^0,c
  1132                           
  1133                           ;application.c: 232:                         ret = gpio_pin_write_logic(&control_6, GPIO
      +                          _LOGIC_HIGH);
  1134   001414  0E33               	movlw	low _control_6
  1135   001416  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1136   001418  0E01               	movlw	1
  1137   00141A  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1138   00141C  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1139   001420  6E61               	movwf	_ret^0,c
  1140                           
  1141                           ;application.c: 233:                         ret = segment_write_number(&seg, seconds%10
      +                          );
  1142   001422  0E1F               	movlw	low _seg
  1143   001424  6E55               	movwf	segment_write_number@seg^0,c
  1144   001426  C05E  F04D         	movff	main@seconds,___awmod@dividend
  1145   00142A  6A4E               	clrf	(___awmod@dividend+1)^0,c
  1146   00142C  0E00               	movlw	0
  1147   00142E  6E50               	movwf	(___awmod@divisor+1)^0,c
  1148   001430  0E0A               	movlw	10
  1149   001432  6E4F               	movwf	___awmod@divisor^0,c
  1150   001434  ECB5  F00C         	call	___awmod	;wreg free
  1151   001438  504D               	movf	?___awmod^0,w,c
  1152   00143A  6E56               	movwf	segment_write_number@number^0,c
  1153   00143C  EC9E  F00D         	call	_segment_write_number	;wreg free
  1154   001440  6E61               	movwf	_ret^0,c
  1155   001442                     
  1156                           ;application.c: 234:                         _delay((unsigned long)((3333)*(8000000UL/40
      +                          00000.0)));
  1157   001442  0E09               	movlw	9
  1158   001444  6E5A               	movwf	??_main^0,c
  1159   001446  0EA7               	movlw	167
  1160   001448                     u2067:
  1161   001448  2EE8               	decfsz	wreg,f,c
  1162   00144A  D7FE               	bra	u2067
  1163   00144C  2E5A               	decfsz	??_main^0,f,c
  1164   00144E  D7FC               	bra	u2067
  1165   001450  0000               	nop	
  1166   001452                     
  1167                           ;application.c: 235:                         ret = gpio_pin_write_logic(&control_6, GPIO
      +                          _LOGIC_LOW);
  1168   001452  0E33               	movlw	low _control_6
  1169   001454  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1170   001456  0E00               	movlw	0
  1171   001458  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1172   00145A  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1173   00145E  6E61               	movwf	_ret^0,c
  1174   001460                     
  1175                           ;application.c: 237:                         ret = Button_read(&start, &start_state);
  1176   001460  0E30               	movlw	low _start
  1177   001462  6E55               	movwf	Button_read@btn^0,c
  1178   001464  0E4C               	movlw	low _start_state
  1179   001466  6E56               	movwf	Button_read@_st^0,c
  1180   001468  EC5C  F00C         	call	_Button_read	;wreg free
  1181   00146C  6E61               	movwf	_ret^0,c
  1182   00146E                     
  1183                           ;application.c: 238:                         ret = Button_read(&reset, &reset_state);
  1184   00146E  0E24               	movlw	low _reset
  1185   001470  6E55               	movwf	Button_read@btn^0,c
  1186   001472  0E4A               	movlw	low _reset_state
  1187   001474  6E56               	movwf	Button_read@_st^0,c
  1188   001476  EC5C  F00C         	call	_Button_read	;wreg free
  1189   00147A  6E61               	movwf	_ret^0,c
  1190   00147C                     
  1191                           ;application.c: 239:                         if(start_state == BUTTON_PRESSED || reset_s
      +                          tate == BUTTON_PRESSED)
  1192   00147C  044C               	decf	_start_state^0,w,c
  1193   00147E  B4D8               	btfsc	status,2,c
  1194   001480  EF44  F00A         	goto	u1751
  1195   001484  EF46  F00A         	goto	u1750
  1196   001488                     u1751:
  1197   001488  EF4E  F00A         	goto	l2718
  1198   00148C                     u1750:
  1199   00148C  044A               	decf	_reset_state^0,w,c
  1200   00148E  A4D8               	btfss	status,2,c
  1201   001490  EF4C  F00A         	goto	u1761
  1202   001494  EF4E  F00A         	goto	u1760
  1203   001498                     u1761:
  1204   001498  EF44  F009         	goto	l2676
  1205   00149C                     u1760:
  1206   00149C                     l2718:
  1207                           
  1208                           ;application.c: 247:                 ret = Button_read(&stop, &stop_state);
  1209   00149C  0E2D               	movlw	low _stop
  1210   00149E  6E55               	movwf	Button_read@btn^0,c
  1211   0014A0  0E4B               	movlw	low _stop_state
  1212   0014A2  6E56               	movwf	Button_read@_st^0,c
  1213   0014A4  EC5C  F00C         	call	_Button_read	;wreg free
  1214   0014A8  6E61               	movwf	_ret^0,c
  1215   0014AA                     
  1216                           ;application.c: 248:                 if(stop_state == BUTTON_PRESSED)
  1217   0014AA  044B               	decf	_stop_state^0,w,c
  1218   0014AC  A4D8               	btfss	status,2,c
  1219   0014AE  EF5B  F00A         	goto	u1771
  1220   0014B2  EF5D  F00A         	goto	u1770
  1221   0014B6                     u1771:
  1222   0014B6  EF9C  F00A         	goto	l2736
  1223   0014BA                     u1770:
  1224   0014BA                     l2722:
  1225                           
  1226                           ;application.c: 251:                     {;application.c: 252:                         r
      +                          et = gpio_pin_write_logic(&control_1, GPIO_LOGIC_LOW);
  1227   0014BA  0E38               	movlw	low _control_1
  1228   0014BC  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1229   0014BE  0E00               	movlw	0
  1230   0014C0  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1231   0014C2  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1232   0014C6  6E61               	movwf	_ret^0,c
  1233                           
  1234                           ;application.c: 253:                         ret = gpio_pin_write_logic(&control_2, GPIO
      +                          _LOGIC_LOW);
  1235   0014C8  0E37               	movlw	low _control_2
  1236   0014CA  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1237   0014CC  0E00               	movlw	0
  1238   0014CE  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1239   0014D0  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1240   0014D4  6E61               	movwf	_ret^0,c
  1241                           
  1242                           ;application.c: 254:                         ret = gpio_pin_write_logic(&control_3, GPIO
      +                          _LOGIC_LOW);
  1243   0014D6  0E36               	movlw	low _control_3
  1244   0014D8  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1245   0014DA  0E00               	movlw	0
  1246   0014DC  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1247   0014DE  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1248   0014E2  6E61               	movwf	_ret^0,c
  1249                           
  1250                           ;application.c: 255:                         ret = gpio_pin_write_logic(&control_4, GPIO
      +                          _LOGIC_LOW);
  1251   0014E4  0E35               	movlw	low _control_4
  1252   0014E6  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1253   0014E8  0E00               	movlw	0
  1254   0014EA  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1255   0014EC  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1256   0014F0  6E61               	movwf	_ret^0,c
  1257                           
  1258                           ;application.c: 256:                         ret = gpio_pin_write_logic(&control_5, GPIO
      +                          _LOGIC_LOW);
  1259   0014F2  0E34               	movlw	low _control_5
  1260   0014F4  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1261   0014F6  0E00               	movlw	0
  1262   0014F8  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1263   0014FA  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1264   0014FE  6E61               	movwf	_ret^0,c
  1265                           
  1266                           ;application.c: 257:                         ret = gpio_pin_write_logic(&control_6, GPIO
      +                          _LOGIC_LOW);
  1267   001500  0E33               	movlw	low _control_6
  1268   001502  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1269   001504  0E00               	movlw	0
  1270   001506  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1271   001508  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1272   00150C  6E61               	movwf	_ret^0,c
  1273   00150E                     
  1274                           ;application.c: 258:                         hours = 0;
  1275   00150E  0E00               	movlw	0
  1276   001510  6E60               	movwf	main@hours^0,c
  1277   001512                     
  1278                           ;application.c: 259:                         minutes = 0;
  1279   001512  0E00               	movlw	0
  1280   001514  6E5F               	movwf	main@minutes^0,c
  1281   001516                     
  1282                           ;application.c: 260:                         seconds = 0;
  1283   001516  0E00               	movlw	0
  1284   001518  6E5E               	movwf	main@seconds^0,c
  1285   00151A                     
  1286                           ;application.c: 261:                         ret = Button_read(&start, &start_state);
  1287   00151A  0E30               	movlw	low _start
  1288   00151C  6E55               	movwf	Button_read@btn^0,c
  1289   00151E  0E4C               	movlw	low _start_state
  1290   001520  6E56               	movwf	Button_read@_st^0,c
  1291   001522  EC5C  F00C         	call	_Button_read	;wreg free
  1292   001526  6E61               	movwf	_ret^0,c
  1293   001528                     
  1294                           ;application.c: 262:                         if(start_state == BUTTON_PRESSED)
  1295   001528  044C               	decf	_start_state^0,w,c
  1296   00152A  A4D8               	btfss	status,2,c
  1297   00152C  EF9A  F00A         	goto	u1781
  1298   001530  EF9C  F00A         	goto	u1780
  1299   001534                     u1781:
  1300   001534  EF5D  F00A         	goto	l2722
  1301   001538                     u1780:
  1302   001538                     l2736:
  1303                           
  1304                           ;application.c: 270:                 ret = Button_read(&reset, &reset_state);
  1305   001538  0E24               	movlw	low _reset
  1306   00153A  6E55               	movwf	Button_read@btn^0,c
  1307   00153C  0E4A               	movlw	low _reset_state
  1308   00153E  6E56               	movwf	Button_read@_st^0,c
  1309   001540  EC5C  F00C         	call	_Button_read	;wreg free
  1310   001544  6E61               	movwf	_ret^0,c
  1311   001546                     
  1312                           ;application.c: 271:                 if(reset_state == BUTTON_PRESSED)
  1313   001546  044A               	decf	_reset_state^0,w,c
  1314   001548  A4D8               	btfss	status,2,c
  1315   00154A  EFA9  F00A         	goto	u1791
  1316   00154E  EFAB  F00A         	goto	u1790
  1317   001552                     u1791:
  1318   001552  EFB1  F00A         	goto	l2742
  1319   001556                     u1790:
  1320   001556                     
  1321                           ;application.c: 272:                 {;application.c: 273:                     hours = 0
      +                          ;
  1322   001556  0E00               	movlw	0
  1323   001558  6E60               	movwf	main@hours^0,c
  1324                           
  1325                           ;application.c: 274:                     minutes = 0;
  1326   00155A  0E00               	movlw	0
  1327   00155C  6E5F               	movwf	main@minutes^0,c
  1328                           
  1329                           ;application.c: 275:                     seconds = 0;
  1330   00155E  0E00               	movlw	0
  1331   001560  6E5E               	movwf	main@seconds^0,c
  1332   001562                     l2742:
  1333                           
  1334                           ;application.c: 277:             }
  1335   001562  2A5B               	incf	main@counter^0,f,c
  1336   001564                     l2744:
  1337   001564  505B               	movf	main@counter^0,w,c
  1338   001566  5C5D               	subwf	main@delay_time^0,w,c
  1339   001568  B0D8               	btfsc	status,0,c
  1340   00156A  EFB9  F00A         	goto	u1801
  1341   00156E  EFBB  F00A         	goto	u1800
  1342   001572                     u1801:
  1343   001572  EF2C  F008         	goto	l2628
  1344   001576                     u1800:
  1345   001576                     l2746:
  1346                           
  1347                           ;application.c: 279:             seconds++;
  1348   001576  2A5E               	incf	main@seconds^0,f,c
  1349   001578                     
  1350                           ;application.c: 280:             if(seconds == 60)
  1351   001578  0E3C               	movlw	60
  1352   00157A  185E               	xorwf	main@seconds^0,w,c
  1353   00157C  A4D8               	btfss	status,2,c
  1354   00157E  EFC3  F00A         	goto	u1811
  1355   001582  EFC5  F00A         	goto	u1810
  1356   001586                     u1811:
  1357   001586  EFC8  F00A         	goto	l2754
  1358   00158A                     u1810:
  1359   00158A                     
  1360                           ;application.c: 281:             {;application.c: 282:                 minutes++;
  1361   00158A  2A5F               	incf	main@minutes^0,f,c
  1362   00158C                     
  1363                           ;application.c: 283:                 seconds = 0;
  1364   00158C  0E00               	movlw	0
  1365   00158E  6E5E               	movwf	main@seconds^0,c
  1366   001590                     l2754:
  1367                           
  1368                           ;application.c: 285:             if(minutes == 60)
  1369   001590  0E3C               	movlw	60
  1370   001592  185F               	xorwf	main@minutes^0,w,c
  1371   001594  A4D8               	btfss	status,2,c
  1372   001596  EFCF  F00A         	goto	u1821
  1373   00159A  EFD1  F00A         	goto	u1820
  1374   00159E                     u1821:
  1375   00159E  EFD4  F00A         	goto	l2760
  1376   0015A2                     u1820:
  1377   0015A2                     
  1378                           ;application.c: 286:             {;application.c: 287:                 hours++;
  1379   0015A2  2A60               	incf	main@hours^0,f,c
  1380   0015A4                     
  1381                           ;application.c: 288:                 minutes = 0;
  1382   0015A4  0E00               	movlw	0
  1383   0015A6  6E5F               	movwf	main@minutes^0,c
  1384   0015A8                     l2760:
  1385                           
  1386                           ;application.c: 290:             if(hours > 99)
  1387   0015A8  0E63               	movlw	99
  1388   0015AA  6460               	cpfsgt	main@hours^0,c
  1389   0015AC  EFDA  F00A         	goto	u1831
  1390   0015B0  EFDC  F00A         	goto	u1830
  1391   0015B4                     u1831:
  1392   0015B4  EF0F  F008         	goto	l2618
  1393   0015B8                     u1830:
  1394   0015B8                     
  1395                           ;application.c: 291:             {;application.c: 292:                 hours = 0;
  1396   0015B8  0E00               	movlw	0
  1397   0015BA  6E60               	movwf	main@hours^0,c
  1398   0015BC  EF0F  F008         	goto	l2618
  1399   0015C0  EF00  F000         	goto	start
  1400   0015C4                     __end_of_main:
  1401                           	callstack 0
  1402                           
  1403 ;; *************** function _segment_write_number *****************
  1404 ;; Defined at:
  1405 ;;		line 29 in file "ECU_layer/7_segment/segment.c"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;  seg             1    8[COMRAM] PTR const struct .
  1408 ;;		 -> seg(5), 
  1409 ;;  number          1    9[COMRAM] unsigned char 
  1410 ;; Auto vars:     Size  Location     Type
  1411 ;;  ret             1   10[COMRAM] unsigned char 
  1412 ;; Return value:  Size  Location     Type
  1413 ;;                  1    wreg      unsigned char 
  1414 ;; Registers used:
  1415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1416 ;; Tracked objects:
  1417 ;;		On entry : 0/0
  1418 ;;		On exit  : 0/0
  1419 ;;		Unchanged: 0/0
  1420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1421 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1422 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1424 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1425 ;;Total ram usage:        3 bytes
  1426 ;; Hardware stack levels used: 1
  1427 ;; Hardware stack levels required when called: 1
  1428 ;; This function calls:
  1429 ;;		_gpio_pin_write_logic
  1430 ;; This function is called by:
  1431 ;;		_main
  1432 ;; This function uses a non-reentrant model
  1433 ;;
  1434                           
  1435                           	psect	text1
  1436   001B3C                     __ptext1:
  1437                           	callstack 0
  1438   001B3C                     _segment_write_number:
  1439                           	callstack 29
  1440   001B3C                     
  1441                           ;ECU_layer/7_segment/segment.c: 32:     if(seg == ((void*)0) || number > 9)
  1442   001B3C  5055               	movf	segment_write_number@seg^0,w,c
  1443   001B3E  B4D8               	btfsc	status,2,c
  1444   001B40  EFA4  F00D         	goto	u1231
  1445   001B44  EFA6  F00D         	goto	u1230
  1446   001B48                     u1231:
  1447   001B48  EFAE  F00D         	goto	l2258
  1448   001B4C                     u1230:
  1449   001B4C  0E09               	movlw	9
  1450   001B4E  6456               	cpfsgt	segment_write_number@number^0,c
  1451   001B50  EFAC  F00D         	goto	u1241
  1452   001B54  EFAE  F00D         	goto	u1240
  1453   001B58                     u1241:
  1454   001B58  EFB2  F00D         	goto	l2260
  1455   001B5C                     u1240:
  1456   001B5C                     l2258:
  1457                           
  1458                           ;ECU_layer/7_segment/segment.c: 33:     {;ECU_layer/7_segment/segment.c: 34:         ret
      +                           = (Std_ReturnType) 0x00;
  1459   001B5C  0E00               	movlw	0
  1460   001B5E  6E57               	movwf	segment_write_number@ret^0,c
  1461                           
  1462                           ;ECU_layer/7_segment/segment.c: 35:     }
  1463   001B60  EFD7  F00D         	goto	l2264
  1464   001B64                     l2260:
  1465                           
  1466                           ;ECU_layer/7_segment/segment.c: 37:     {;ECU_layer/7_segment/segment.c: 38:         gpi
      +                          o_pin_write_logic(&(seg->segment_pin[0]), ((number >> 0) & 0x01));
  1467   001B64  C055  F04D         	movff	segment_write_number@seg,gpio_pin_write_logic@_pin_config
  1468   001B68  5056               	movf	segment_write_number@number^0,w,c
  1469   001B6A  0B01               	andlw	1
  1470   001B6C  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1471   001B6E  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1472                           
  1473                           ;ECU_layer/7_segment/segment.c: 39:         gpio_pin_write_logic(&(seg->segment_pin[1]),
      +                           ((number >> 1) & 0x01));
  1474   001B72  2855               	incf	segment_write_number@seg^0,w,c
  1475   001B74  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1476   001B76  90D8               	bcf	status,0,c
  1477   001B78  3056               	rrcf	segment_write_number@number^0,w,c
  1478   001B7A  0B01               	andlw	1
  1479   001B7C  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1480   001B7E  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1481                           
  1482                           ;ECU_layer/7_segment/segment.c: 40:         gpio_pin_write_logic(&(seg->segment_pin[2]),
      +                           ((number >> 2) & 0x01));
  1483   001B82  5055               	movf	segment_write_number@seg^0,w,c
  1484   001B84  0F02               	addlw	2
  1485   001B86  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1486   001B88  4056               	rrncf	segment_write_number@number^0,w,c
  1487   001B8A  42E8               	rrncf	wreg,f,c
  1488   001B8C  0B3F               	andlw	63
  1489   001B8E  0B01               	andlw	1
  1490   001B90  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1491   001B92  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1492                           
  1493                           ;ECU_layer/7_segment/segment.c: 41:         gpio_pin_write_logic(&(seg->segment_pin[3]),
      +                           ((number >> 3) & 0x01));
  1494   001B96  5055               	movf	segment_write_number@seg^0,w,c
  1495   001B98  0F03               	addlw	3
  1496   001B9A  6E4D               	movwf	gpio_pin_write_logic@_pin_config^0,c
  1497   001B9C  3856               	swapf	segment_write_number@number^0,w,c
  1498   001B9E  46E8               	rlncf	wreg,f,c
  1499   001BA0  0B1F               	andlw	31
  1500   001BA2  0B01               	andlw	1
  1501   001BA4  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1502   001BA6  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1503   001BAA                     
  1504                           ;ECU_layer/7_segment/segment.c: 42:         ret = (Std_ReturnType) 0x01;
  1505   001BAA  0E01               	movlw	1
  1506   001BAC  6E57               	movwf	segment_write_number@ret^0,c
  1507   001BAE                     l2264:
  1508                           
  1509                           ;ECU_layer/7_segment/segment.c: 44:     return ret;
  1510   001BAE  5057               	movf	segment_write_number@ret^0,w,c
  1511   001BB0  0012               	return		;funcret
  1512   001BB2                     __end_of_segment_write_number:
  1513                           	callstack 0
  1514                           
  1515 ;; *************** function _application_initialize *****************
  1516 ;; Defined at:
  1517 ;;		line 309 in file "application.c"
  1518 ;; Parameters:    Size  Location     Type
  1519 ;;		None
  1520 ;; Auto vars:     Size  Location     Type
  1521 ;;  ret             1   12[COMRAM] unsigned char 
  1522 ;; Return value:  Size  Location     Type
  1523 ;;                  1    wreg      void 
  1524 ;; Registers used:
  1525 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1526 ;; Tracked objects:
  1527 ;;		On entry : 0/0
  1528 ;;		On exit  : 0/0
  1529 ;;		Unchanged: 0/0
  1530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1532 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1534 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1535 ;;Total ram usage:        1 bytes
  1536 ;; Hardware stack levels used: 1
  1537 ;; Hardware stack levels required when called: 3
  1538 ;; This function calls:
  1539 ;;		_Button_initialize
  1540 ;;		_gpio_pin_initialize
  1541 ;;		_segment_inititalize
  1542 ;; This function is called by:
  1543 ;;		_main
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546                           
  1547                           	psect	text2
  1548   001AC2                     __ptext2:
  1549                           	callstack 0
  1550   001AC2                     _application_initialize:
  1551                           	callstack 27
  1552   001AC2                     
  1553                           ;application.c: 311:     Std_ReturnType ret;;application.c: 313:     ret = gpio_pin_init
      +                          ialize(&control_1);
  1554   001AC2  0E38               	movlw	low _control_1
  1555   001AC4  6E55               	movwf	gpio_pin_initialize@_pin_config^0,c
  1556   001AC6  ECD9  F00D         	call	_gpio_pin_initialize	;wreg free
  1557   001ACA  6E59               	movwf	application_initialize@ret^0,c
  1558                           
  1559                           ;application.c: 314:     ret = gpio_pin_initialize(&control_2);
  1560   001ACC  0E37               	movlw	low _control_2
  1561   001ACE  6E55               	movwf	gpio_pin_initialize@_pin_config^0,c
  1562   001AD0  ECD9  F00D         	call	_gpio_pin_initialize	;wreg free
  1563   001AD4  6E59               	movwf	application_initialize@ret^0,c
  1564                           
  1565                           ;application.c: 315:     ret = gpio_pin_initialize(&control_3);
  1566   001AD6  0E36               	movlw	low _control_3
  1567   001AD8  6E55               	movwf	gpio_pin_initialize@_pin_config^0,c
  1568   001ADA  ECD9  F00D         	call	_gpio_pin_initialize	;wreg free
  1569   001ADE  6E59               	movwf	application_initialize@ret^0,c
  1570                           
  1571                           ;application.c: 316:     ret = gpio_pin_initialize(&control_4);
  1572   001AE0  0E35               	movlw	low _control_4
  1573   001AE2  6E55               	movwf	gpio_pin_initialize@_pin_config^0,c
  1574   001AE4  ECD9  F00D         	call	_gpio_pin_initialize	;wreg free
  1575   001AE8  6E59               	movwf	application_initialize@ret^0,c
  1576                           
  1577                           ;application.c: 317:     ret = gpio_pin_initialize(&control_5);
  1578   001AEA  0E34               	movlw	low _control_5
  1579   001AEC  6E55               	movwf	gpio_pin_initialize@_pin_config^0,c
  1580   001AEE  ECD9  F00D         	call	_gpio_pin_initialize	;wreg free
  1581   001AF2  6E59               	movwf	application_initialize@ret^0,c
  1582                           
  1583                           ;application.c: 318:     ret = gpio_pin_initialize(&control_6);
  1584   001AF4  0E33               	movlw	low _control_6
  1585   001AF6  6E55               	movwf	gpio_pin_initialize@_pin_config^0,c
  1586   001AF8  ECD9  F00D         	call	_gpio_pin_initialize	;wreg free
  1587   001AFC  6E59               	movwf	application_initialize@ret^0,c
  1588                           
  1589                           ;application.c: 321:     ret = segment_inititalize(&seg);
  1590   001AFE  0E1F               	movlw	low _seg
  1591   001B00  6E57               	movwf	segment_inititalize@seg^0,c
  1592   001B02  EC01  F00E         	call	_segment_inititalize	;wreg free
  1593   001B06  6E59               	movwf	application_initialize@ret^0,c
  1594                           
  1595                           ;application.c: 324:     ret = Button_initialize(&start);
  1596   001B08  0E30               	movlw	low _start
  1597   001B0A  6E53               	movwf	Button_initialize@btn^0,c
  1598   001B0C  EC5E  F00E         	call	_Button_initialize	;wreg free
  1599   001B10  6E59               	movwf	application_initialize@ret^0,c
  1600                           
  1601                           ;application.c: 325:     ret = Button_initialize(&stop);
  1602   001B12  0E2D               	movlw	low _stop
  1603   001B14  6E53               	movwf	Button_initialize@btn^0,c
  1604   001B16  EC5E  F00E         	call	_Button_initialize	;wreg free
  1605   001B1A  6E59               	movwf	application_initialize@ret^0,c
  1606                           
  1607                           ;application.c: 326:     ret = Button_initialize(&pause);
  1608   001B1C  0E27               	movlw	low _pause
  1609   001B1E  6E53               	movwf	Button_initialize@btn^0,c
  1610   001B20  EC5E  F00E         	call	_Button_initialize	;wreg free
  1611   001B24  6E59               	movwf	application_initialize@ret^0,c
  1612                           
  1613                           ;application.c: 327:     ret = Button_initialize(&speed_up);
  1614   001B26  0E2A               	movlw	low _speed_up
  1615   001B28  6E53               	movwf	Button_initialize@btn^0,c
  1616   001B2A  EC5E  F00E         	call	_Button_initialize	;wreg free
  1617   001B2E  6E59               	movwf	application_initialize@ret^0,c
  1618                           
  1619                           ;application.c: 328:     ret = Button_initialize(&reset);
  1620   001B30  0E24               	movlw	low _reset
  1621   001B32  6E53               	movwf	Button_initialize@btn^0,c
  1622   001B34  EC5E  F00E         	call	_Button_initialize	;wreg free
  1623   001B38  6E59               	movwf	application_initialize@ret^0,c
  1624   001B3A  0012               	return		;funcret
  1625   001B3C                     __end_of_application_initialize:
  1626                           	callstack 0
  1627                           
  1628 ;; *************** function _segment_inititalize *****************
  1629 ;; Defined at:
  1630 ;;		line 11 in file "ECU_layer/7_segment/segment.c"
  1631 ;; Parameters:    Size  Location     Type
  1632 ;;  seg             1   10[COMRAM] PTR const struct .
  1633 ;;		 -> seg(5), 
  1634 ;; Auto vars:     Size  Location     Type
  1635 ;;  ret             1   11[COMRAM] unsigned char 
  1636 ;; Return value:  Size  Location     Type
  1637 ;;                  1    wreg      unsigned char 
  1638 ;; Registers used:
  1639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1640 ;; Tracked objects:
  1641 ;;		On entry : 0/0
  1642 ;;		On exit  : 0/0
  1643 ;;		Unchanged: 0/0
  1644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1645 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1646 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1648 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1649 ;;Total ram usage:        2 bytes
  1650 ;; Hardware stack levels used: 1
  1651 ;; Hardware stack levels required when called: 2
  1652 ;; This function calls:
  1653 ;;		_gpio_pin_initialize
  1654 ;; This function is called by:
  1655 ;;		_application_initialize
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659                           	psect	text3
  1660   001C02                     __ptext3:
  1661                           	callstack 0
  1662   001C02                     _segment_inititalize:
  1663                           	callstack 27
  1664   001C02                     
  1665                           ;ECU_layer/7_segment/segment.c: 14:     if(seg == ((void*)0))
  1666   001C02  5057               	movf	segment_inititalize@seg^0,w,c
  1667   001C04  A4D8               	btfss	status,2,c
  1668   001C06  EF07  F00E         	goto	u1171
  1669   001C0A  EF09  F00E         	goto	u1170
  1670   001C0E                     u1171:
  1671   001C0E  EF0D  F00E         	goto	l2218
  1672   001C12                     u1170:
  1673   001C12                     
  1674                           ;ECU_layer/7_segment/segment.c: 15:     {;ECU_layer/7_segment/segment.c: 16:         ret
      +                           = (Std_ReturnType) 0x00;
  1675   001C12  0E00               	movlw	0
  1676   001C14  6E58               	movwf	segment_inititalize@ret^0,c
  1677                           
  1678                           ;ECU_layer/7_segment/segment.c: 17:     }
  1679   001C16  EF25  F00E         	goto	l2222
  1680   001C1A                     l2218:
  1681                           
  1682                           ;ECU_layer/7_segment/segment.c: 19:     {;ECU_layer/7_segment/segment.c: 20:         ret
      +                           = gpio_pin_initialize(&(seg->segment_pin[0]));
  1683   001C1A  C057  F055         	movff	segment_inititalize@seg,gpio_pin_initialize@_pin_config
  1684   001C1E  ECD9  F00D         	call	_gpio_pin_initialize	;wreg free
  1685   001C22  6E58               	movwf	segment_inititalize@ret^0,c
  1686                           
  1687                           ;ECU_layer/7_segment/segment.c: 21:         ret = gpio_pin_initialize(&(seg->segment_pin
      +                          [1]));
  1688   001C24  2857               	incf	segment_inititalize@seg^0,w,c
  1689   001C26  6E55               	movwf	gpio_pin_initialize@_pin_config^0,c
  1690   001C28  ECD9  F00D         	call	_gpio_pin_initialize	;wreg free
  1691   001C2C  6E58               	movwf	segment_inititalize@ret^0,c
  1692                           
  1693                           ;ECU_layer/7_segment/segment.c: 22:         ret = gpio_pin_initialize(&(seg->segment_pin
      +                          [2]));
  1694   001C2E  5057               	movf	segment_inititalize@seg^0,w,c
  1695   001C30  0F02               	addlw	2
  1696   001C32  6E55               	movwf	gpio_pin_initialize@_pin_config^0,c
  1697   001C34  ECD9  F00D         	call	_gpio_pin_initialize	;wreg free
  1698   001C38  6E58               	movwf	segment_inititalize@ret^0,c
  1699                           
  1700                           ;ECU_layer/7_segment/segment.c: 23:         ret = gpio_pin_initialize(&(seg->segment_pin
      +                          [3]));
  1701   001C3A  5057               	movf	segment_inititalize@seg^0,w,c
  1702   001C3C  0F03               	addlw	3
  1703   001C3E  6E55               	movwf	gpio_pin_initialize@_pin_config^0,c
  1704   001C40  ECD9  F00D         	call	_gpio_pin_initialize	;wreg free
  1705   001C44  6E58               	movwf	segment_inititalize@ret^0,c
  1706   001C46                     
  1707                           ;ECU_layer/7_segment/segment.c: 24:         ret = (Std_ReturnType) 0x01;
  1708   001C46  0E01               	movlw	1
  1709   001C48  6E58               	movwf	segment_inititalize@ret^0,c
  1710   001C4A                     l2222:
  1711                           
  1712                           ;ECU_layer/7_segment/segment.c: 26:     return ret;
  1713   001C4A  5058               	movf	segment_inititalize@ret^0,w,c
  1714   001C4C  0012               	return		;funcret
  1715   001C4E                     __end_of_segment_inititalize:
  1716                           	callstack 0
  1717                           
  1718 ;; *************** function _gpio_pin_initialize *****************
  1719 ;; Defined at:
  1720 ;;		line 16 in file "MCAL_layer/GPIO/hal_gpio.c"
  1721 ;; Parameters:    Size  Location     Type
  1722 ;;  _pin_config     1    8[COMRAM] PTR const struct .
  1723 ;;		 -> control_6(1), control_5(1), control_4(1), control_3(1), 
  1724 ;;		 -> control_2(1), control_1(1), seg$segment_pin(4), seg(5), 
  1725 ;;		 -> Relay_initialize@obj(1), led_initialize@obj(1), dc_motor_intitialize@obj2(1), dc_motor_intitialize@obj1(1), 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  ret             1    0        unsigned char 
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      unsigned char 
  1730 ;; Registers used:
  1731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1737 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1739 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1740 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1741 ;;Total ram usage:        2 bytes
  1742 ;; Hardware stack levels used: 1
  1743 ;; Hardware stack levels required when called: 1
  1744 ;; This function calls:
  1745 ;;		_gpio_pin_direction_initialize
  1746 ;;		_gpio_pin_write_logic
  1747 ;; This function is called by:
  1748 ;;		_segment_inititalize
  1749 ;;		_application_initialize
  1750 ;;		_dc_motor_intitialize
  1751 ;;		_led_initialize
  1752 ;;		_Relay_initialize
  1753 ;;		_keypad_initialize
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           	psect	text4
  1758   001BB2                     __ptext4:
  1759                           	callstack 0
  1760   001BB2                     _gpio_pin_initialize:
  1761                           	callstack 27
  1762   001BB2                     
  1763                           ;MCAL_layer/GPIO/hal_gpio.c: 19:     if(_pin_config == ((void*)0) || _pin_config->pin > 
      +                          8 -1)
  1764   001BB2  5055               	movf	gpio_pin_initialize@_pin_config^0,w,c
  1765   001BB4  B4D8               	btfsc	status,2,c
  1766   001BB6  EFDF  F00D         	goto	u1151
  1767   001BBA  EFE1  F00D         	goto	u1150
  1768   001BBE                     u1151:
  1769   001BBE  EFF1  F00D         	goto	l2204
  1770   001BC2                     u1150:
  1771   001BC2  5055               	movf	gpio_pin_initialize@_pin_config^0,w,c
  1772   001BC4  6ED9               	movwf	fsr2l,c
  1773   001BC6  6ADA               	clrf	fsr2h,c
  1774   001BC8  30DF               	rrcf	223,w,c
  1775   001BCA  32E8               	rrcf	wreg,f,c
  1776   001BCC  32E8               	rrcf	wreg,f,c
  1777   001BCE  0B07               	andlw	7
  1778   001BD0  6E56               	movwf	??_gpio_pin_initialize^0,c
  1779   001BD2  0E07               	movlw	7
  1780   001BD4  6456               	cpfsgt	??_gpio_pin_initialize^0,c
  1781   001BD6  EFEF  F00D         	goto	u1161
  1782   001BDA  EFF1  F00D         	goto	u1160
  1783   001BDE                     u1161:
  1784   001BDE  EFF3  F00D         	goto	l2206
  1785   001BE2                     u1160:
  1786   001BE2                     l2204:
  1787                           
  1788                           ;MCAL_layer/GPIO/hal_gpio.c: 22:     }
  1789   001BE2  EFFF  F00D         	goto	l2210
  1790   001BE6                     l2206:
  1791                           
  1792                           ;MCAL_layer/GPIO/hal_gpio.c: 24:     {;MCAL_layer/GPIO/hal_gpio.c: 25:         gpio_pin_
      +                          direction_initialize(_pin_config);
  1793   001BE6  C055  F04D         	movff	gpio_pin_initialize@_pin_config,gpio_pin_direction_initialize@_pin_config
  1794   001BEA  ECE2  F00A         	call	_gpio_pin_direction_initialize	;wreg free
  1795                           
  1796                           ;MCAL_layer/GPIO/hal_gpio.c: 26:         gpio_pin_write_logic(_pin_config ,GPIO_LOGIC_LO
      +                          W);
  1797   001BEE  C055  F04D         	movff	gpio_pin_initialize@_pin_config,gpio_pin_write_logic@_pin_config
  1798   001BF2  0E00               	movlw	0
  1799   001BF4  6E4E               	movwf	gpio_pin_write_logic@logic^0,c
  1800   001BF6  EC72  F00B         	call	_gpio_pin_write_logic	;wreg free
  1801   001BFA  EFF1  F00D         	goto	l2204
  1802   001BFE                     l2210:
  1803                           
  1804                           ;MCAL_layer/GPIO/hal_gpio.c: 29:     return ret;
  1805   001BFE  0E00               	movlw	0
  1806   001C00  0012               	return		;funcret
  1807   001C02                     __end_of_gpio_pin_initialize:
  1808                           	callstack 0
  1809                           
  1810 ;; *************** function _gpio_pin_write_logic *****************
  1811 ;; Defined at:
  1812 ;;		line 93 in file "MCAL_layer/GPIO/hal_gpio.c"
  1813 ;; Parameters:    Size  Location     Type
  1814 ;;  _pin_config     1    0[COMRAM] PTR const struct .
  1815 ;;		 -> control_6(1), control_5(1), control_4(1), control_3(1), 
  1816 ;;		 -> control_2(1), control_1(1), seg$segment_pin(4), seg(5), 
  1817 ;;		 -> Relay_turn_off@obj(1), Relay_turn_on@obj(1), Relay_initialize@obj(1), led_turn_off@obj(1), 
  1818 ;;		 -> led_turn_on@obj(1), led_initialize@obj(1), dc_motor_stop@obj2(1), dc_motor_stop@obj1(1), 
  1819 ;;		 -> dc_motor_move_left@obj2(1), dc_motor_move_left@obj1(1), dc_motor_move_right@obj2(1), dc_motor_move_right@obj1(1)
      +, 
  1820 ;;		 -> dc_motor_intitialize@obj2(1), dc_motor_intitialize@obj1(1), 
  1821 ;;  logic           1    1[COMRAM] enum E2821
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;  ret             1    7[COMRAM] unsigned char 
  1824 ;; Return value:  Size  Location     Type
  1825 ;;                  1    wreg      unsigned char 
  1826 ;; Registers used:
  1827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1828 ;; Tracked objects:
  1829 ;;		On entry : 0/0
  1830 ;;		On exit  : 0/0
  1831 ;;		Unchanged: 0/0
  1832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1833 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1835 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1836 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;Total ram usage:        8 bytes
  1838 ;; Hardware stack levels used: 1
  1839 ;; This function calls:
  1840 ;;		Nothing
  1841 ;; This function is called by:
  1842 ;;		_segment_write_number
  1843 ;;		_gpio_pin_initialize
  1844 ;;		_main
  1845 ;;		_dc_motor_move_right
  1846 ;;		_dc_motor_move_left
  1847 ;;		_dc_motor_stop
  1848 ;;		_led_turn_on
  1849 ;;		_led_turn_off
  1850 ;;		_Relay_turn_on
  1851 ;;		_Relay_turn_off
  1852 ;;		_keypad_get_value
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           	psect	text5
  1857   0016E4                     __ptext5:
  1858                           	callstack 0
  1859   0016E4                     _gpio_pin_write_logic:
  1860                           	callstack 29
  1861   0016E4                     
  1862                           ;MCAL_layer/GPIO/hal_gpio.c: 93: Std_ReturnType gpio_pin_write_logic(const pin_config_t*
      +                           _pin_config , logic_t logic);MCAL_layer/GPIO/hal_gpio.c: 94: {;MCAL_layer/GPIO/hal_gpio
      +                          .c: 95:     Std_ReturnType ret = (Std_ReturnType) 0x01;
  1863   0016E4  0E01               	movlw	1
  1864   0016E6  6E54               	movwf	gpio_pin_write_logic@ret^0,c
  1865                           
  1866                           ;MCAL_layer/GPIO/hal_gpio.c: 96:     if(_pin_config == ((void*)0) || _pin_config->pin > 
      +                          8 -1)
  1867   0016E8  504D               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  1868   0016EA  B4D8               	btfsc	status,2,c
  1869   0016EC  EF7A  F00B         	goto	u1051
  1870   0016F0  EF7C  F00B         	goto	u1050
  1871   0016F4                     u1051:
  1872   0016F4  EF8C  F00B         	goto	l2160
  1873   0016F8                     u1050:
  1874   0016F8  504D               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  1875   0016FA  6ED9               	movwf	fsr2l,c
  1876   0016FC  6ADA               	clrf	fsr2h,c
  1877   0016FE  30DF               	rrcf	223,w,c
  1878   001700  32E8               	rrcf	wreg,f,c
  1879   001702  32E8               	rrcf	wreg,f,c
  1880   001704  0B07               	andlw	7
  1881   001706  6E4F               	movwf	??_gpio_pin_write_logic^0,c
  1882   001708  0E07               	movlw	7
  1883   00170A  644F               	cpfsgt	??_gpio_pin_write_logic^0,c
  1884   00170C  EF8A  F00B         	goto	u1061
  1885   001710  EF8C  F00B         	goto	u1060
  1886   001714                     u1061:
  1887   001714  EFE3  F00B         	goto	l2168
  1888   001718                     u1060:
  1889   001718                     l2160:
  1890                           
  1891                           ;MCAL_layer/GPIO/hal_gpio.c: 97:     {;MCAL_layer/GPIO/hal_gpio.c: 98:         ret = (St
      +                          d_ReturnType) 0x00;
  1892   001718  0E00               	movlw	0
  1893   00171A  6E54               	movwf	gpio_pin_write_logic@ret^0,c
  1894                           
  1895                           ;MCAL_layer/GPIO/hal_gpio.c: 99:     }
  1896   00171C  EFF8  F00B         	goto	l2170
  1897   001720                     l2162:
  1898                           
  1899                           ;MCAL_layer/GPIO/hal_gpio.c: 105:                 (*lat_registers[_pin_config->port] &= 
      +                          ~(1 << _pin_config->pin));
  1900   001720  504D               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  1901   001722  6ED9               	movwf	fsr2l,c
  1902   001724  6ADA               	clrf	fsr2h,c
  1903   001726  30DF               	rrcf	223,w,c
  1904   001728  32E8               	rrcf	wreg,f,c
  1905   00172A  32E8               	rrcf	wreg,f,c
  1906   00172C  0B07               	andlw	7
  1907   00172E  6E4F               	movwf	??_gpio_pin_write_logic^0,c
  1908   001730  0E01               	movlw	1
  1909   001732  6E50               	movwf	(??_gpio_pin_write_logic+1)^0,c
  1910   001734  2A4F               	incf	??_gpio_pin_write_logic^0,f,c
  1911   001736  EF9F  F00B         	goto	u1074
  1912   00173A                     u1075:
  1913   00173A  90D8               	bcf	status,0,c
  1914   00173C  3650               	rlcf	(??_gpio_pin_write_logic+1)^0,f,c
  1915   00173E                     u1074:
  1916   00173E  2E4F               	decfsz	??_gpio_pin_write_logic^0,f,c
  1917   001740  EF9D  F00B         	goto	u1075
  1918   001744  5050               	movf	(??_gpio_pin_write_logic+1)^0,w,c
  1919   001746  0AFF               	xorlw	255
  1920   001748  6E51               	movwf	(??_gpio_pin_write_logic+2)^0,c
  1921   00174A  504D               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  1922   00174C  6ED9               	movwf	fsr2l,c
  1923   00174E  6ADA               	clrf	fsr2h,c
  1924   001750  50DF               	movf	223,w,c
  1925   001752  0B07               	andlw	7
  1926   001754  0D02               	mullw	2
  1927   001756  50F3               	movf	243,w,c
  1928   001758  0F0B               	addlw	low _lat_registers
  1929   00175A  6ED9               	movwf	fsr2l,c
  1930   00175C  6ADA               	clrf	fsr2h,c
  1931   00175E  CFDE F052          	movff	postinc2,??_gpio_pin_write_logic+3
  1932   001762  CFDD F053          	movff	postdec2,??_gpio_pin_write_logic+4
  1933   001766  C052  FFD9         	movff	??_gpio_pin_write_logic+3,fsr2l
  1934   00176A  C053  FFDA         	movff	??_gpio_pin_write_logic+4,fsr2h
  1935   00176E  5051               	movf	(??_gpio_pin_write_logic+2)^0,w,c
  1936   001770  16DF               	andwf	indf2,f,c
  1937                           
  1938                           ;MCAL_layer/GPIO/hal_gpio.c: 106:                 break;
  1939   001772  EFF8  F00B         	goto	l2170
  1940   001776                     l2164:
  1941                           
  1942                           ;MCAL_layer/GPIO/hal_gpio.c: 108:                 (*lat_registers[_pin_config->port] |= 
      +                          (1 << _pin_config->pin));
  1943   001776  504D               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  1944   001778  6ED9               	movwf	fsr2l,c
  1945   00177A  6ADA               	clrf	fsr2h,c
  1946   00177C  30DF               	rrcf	223,w,c
  1947   00177E  32E8               	rrcf	wreg,f,c
  1948   001780  32E8               	rrcf	wreg,f,c
  1949   001782  0B07               	andlw	7
  1950   001784  6E4F               	movwf	??_gpio_pin_write_logic^0,c
  1951   001786  0E01               	movlw	1
  1952   001788  6E50               	movwf	(??_gpio_pin_write_logic+1)^0,c
  1953   00178A  2A4F               	incf	??_gpio_pin_write_logic^0,f,c
  1954   00178C  EFCA  F00B         	goto	u1084
  1955   001790                     u1085:
  1956   001790  90D8               	bcf	status,0,c
  1957   001792  3650               	rlcf	(??_gpio_pin_write_logic+1)^0,f,c
  1958   001794                     u1084:
  1959   001794  2E4F               	decfsz	??_gpio_pin_write_logic^0,f,c
  1960   001796  EFC8  F00B         	goto	u1085
  1961   00179A  504D               	movf	gpio_pin_write_logic@_pin_config^0,w,c
  1962   00179C  6ED9               	movwf	fsr2l,c
  1963   00179E  6ADA               	clrf	fsr2h,c
  1964   0017A0  50DF               	movf	223,w,c
  1965   0017A2  0B07               	andlw	7
  1966   0017A4  0D02               	mullw	2
  1967   0017A6  50F3               	movf	243,w,c
  1968   0017A8  0F0B               	addlw	low _lat_registers
  1969   0017AA  6ED9               	movwf	fsr2l,c
  1970   0017AC  6ADA               	clrf	fsr2h,c
  1971   0017AE  CFDE F051          	movff	postinc2,??_gpio_pin_write_logic+2
  1972   0017B2  CFDD F052          	movff	postdec2,??_gpio_pin_write_logic+3
  1973   0017B6  C051  FFD9         	movff	??_gpio_pin_write_logic+2,fsr2l
  1974   0017BA  C052  FFDA         	movff	??_gpio_pin_write_logic+3,fsr2h
  1975   0017BE  5050               	movf	(??_gpio_pin_write_logic+1)^0,w,c
  1976   0017C0  12DF               	iorwf	indf2,f,c
  1977                           
  1978                           ;MCAL_layer/GPIO/hal_gpio.c: 109:                 break;
  1979   0017C2  EFF8  F00B         	goto	l2170
  1980   0017C6                     l2168:
  1981   0017C6  504E               	movf	gpio_pin_write_logic@logic^0,w,c
  1982   0017C8  6E4F               	movwf	??_gpio_pin_write_logic^0,c
  1983   0017CA  6A50               	clrf	(??_gpio_pin_write_logic+1)^0,c
  1984                           
  1985                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1986                           ; Switch size 1, requested type "simple"
  1987                           ; Number of cases is 1, Range of values is 0 to 0
  1988                           ; switch strategies available:
  1989                           ; Name         Instructions Cycles
  1990                           ; simple_byte            4     3 (average)
  1991                           ;	Chosen strategy is simple_byte
  1992   0017CC  5050               	movf	(??_gpio_pin_write_logic+1)^0,w,c
  1993   0017CE  0A00               	xorlw	0	; case 0
  1994   0017D0  B4D8               	btfsc	status,2,c
  1995   0017D2  EFED  F00B         	goto	l2860
  1996   0017D6  EF8C  F00B         	goto	l2160
  1997   0017DA                     l2860:
  1998                           
  1999                           ; Switch size 1, requested type "simple"
  2000                           ; Number of cases is 2, Range of values is 0 to 1
  2001                           ; switch strategies available:
  2002                           ; Name         Instructions Cycles
  2003                           ; simple_byte            7     4 (average)
  2004                           ;	Chosen strategy is simple_byte
  2005   0017DA  504F               	movf	??_gpio_pin_write_logic^0,w,c
  2006   0017DC  0A00               	xorlw	0	; case 0
  2007   0017DE  B4D8               	btfsc	status,2,c
  2008   0017E0  EF90  F00B         	goto	l2162
  2009   0017E4  0A01               	xorlw	1	; case 1
  2010   0017E6  B4D8               	btfsc	status,2,c
  2011   0017E8  EFBB  F00B         	goto	l2164
  2012   0017EC  EF8C  F00B         	goto	l2160
  2013   0017F0                     l2170:
  2014                           
  2015                           ;MCAL_layer/GPIO/hal_gpio.c: 114:     return ret;
  2016   0017F0  5054               	movf	gpio_pin_write_logic@ret^0,w,c
  2017   0017F2  0012               	return		;funcret
  2018   0017F4                     __end_of_gpio_pin_write_logic:
  2019                           	callstack 0
  2020                           
  2021 ;; *************** function _Button_initialize *****************
  2022 ;; Defined at:
  2023 ;;		line 16 in file "ECU_layer/Button/Button.c"
  2024 ;; Parameters:    Size  Location     Type
  2025 ;;  btn             1    6[COMRAM] PTR const struct .
  2026 ;;		 -> reset(3), pause(3), speed_up(3), stop(3), 
  2027 ;;		 -> start(3), 
  2028 ;; Auto vars:     Size  Location     Type
  2029 ;;  ret             1    7[COMRAM] unsigned char 
  2030 ;; Return value:  Size  Location     Type
  2031 ;;                  1    wreg      unsigned char 
  2032 ;; Registers used:
  2033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2034 ;; Tracked objects:
  2035 ;;		On entry : 0/0
  2036 ;;		On exit  : 0/0
  2037 ;;		Unchanged: 0/0
  2038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2039 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2040 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;Total ram usage:        2 bytes
  2044 ;; Hardware stack levels used: 1
  2045 ;; Hardware stack levels required when called: 1
  2046 ;; This function calls:
  2047 ;;		_gpio_pin_direction_initialize
  2048 ;; This function is called by:
  2049 ;;		_application_initialize
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053                           	psect	text6
  2054   001CBC                     __ptext6:
  2055                           	callstack 0
  2056   001CBC                     _Button_initialize:
  2057                           	callstack 28
  2058   001CBC                     
  2059                           ;ECU_layer/Button/Button.c: 19:     if(btn == ((void*)0))
  2060   001CBC  5053               	movf	Button_initialize@btn^0,w,c
  2061   001CBE  A4D8               	btfss	status,2,c
  2062   001CC0  EF64  F00E         	goto	u1181
  2063   001CC4  EF66  F00E         	goto	u1180
  2064   001CC8                     u1181:
  2065   001CC8  EF6A  F00E         	goto	l2230
  2066   001CCC                     u1180:
  2067   001CCC                     
  2068                           ;ECU_layer/Button/Button.c: 20:     {;ECU_layer/Button/Button.c: 21:         ret = (Std_
      +                          ReturnType) 0x00;
  2069   001CCC  0E00               	movlw	0
  2070   001CCE  6E54               	movwf	Button_initialize@ret^0,c
  2071                           
  2072                           ;ECU_layer/Button/Button.c: 22:     }
  2073   001CD0  EF70  F00E         	goto	l2234
  2074   001CD4                     l2230:
  2075                           
  2076                           ;ECU_layer/Button/Button.c: 24:     {;ECU_layer/Button/Button.c: 25:         gpio_pin_di
      +                          rection_initialize(&btn->button);
  2077   001CD4  C053  F04D         	movff	Button_initialize@btn,gpio_pin_direction_initialize@_pin_config
  2078   001CD8  ECE2  F00A         	call	_gpio_pin_direction_initialize	;wreg free
  2079   001CDC                     
  2080                           ;ECU_layer/Button/Button.c: 26:         ret = (Std_ReturnType) 0x01;
  2081   001CDC  0E01               	movlw	1
  2082   001CDE  6E54               	movwf	Button_initialize@ret^0,c
  2083   001CE0                     l2234:
  2084                           
  2085                           ;ECU_layer/Button/Button.c: 28:     return ret;
  2086   001CE0  5054               	movf	Button_initialize@ret^0,w,c
  2087   001CE2  0012               	return		;funcret
  2088   001CE4                     __end_of_Button_initialize:
  2089                           	callstack 0
  2090                           
  2091 ;; *************** function _gpio_pin_direction_initialize *****************
  2092 ;; Defined at:
  2093 ;;		line 39 in file "MCAL_layer/GPIO/hal_gpio.c"
  2094 ;; Parameters:    Size  Location     Type
  2095 ;;  _pin_config     1    0[COMRAM] PTR const struct .
  2096 ;;		 -> control_6(1), control_5(1), control_4(1), control_3(1), 
  2097 ;;		 -> control_2(1), control_1(1), seg$segment_pin(4), seg(5), 
  2098 ;;		 -> reset(3), pause(3), speed_up(3), stop(3), 
  2099 ;;		 -> start(3), Relay_initialize@obj(1), led_initialize@obj(1), dc_motor_intitialize@obj2(1), 
  2100 ;;		 -> dc_motor_intitialize@obj1(1), 
  2101 ;; Auto vars:     Size  Location     Type
  2102 ;;  ret             1    0        unsigned char 
  2103 ;; Return value:  Size  Location     Type
  2104 ;;                  1    wreg      unsigned char 
  2105 ;; Registers used:
  2106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2107 ;; Tracked objects:
  2108 ;;		On entry : 0/0
  2109 ;;		On exit  : 0/0
  2110 ;;		Unchanged: 0/0
  2111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2112 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2114 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2115 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2116 ;;Total ram usage:        6 bytes
  2117 ;; Hardware stack levels used: 1
  2118 ;; This function calls:
  2119 ;;		Nothing
  2120 ;; This function is called by:
  2121 ;;		_Button_initialize
  2122 ;;		_gpio_pin_initialize
  2123 ;; This function uses a non-reentrant model
  2124 ;;
  2125                           
  2126                           	psect	text7
  2127   0015C4                     __ptext7:
  2128                           	callstack 0
  2129   0015C4                     _gpio_pin_direction_initialize:
  2130                           	callstack 27
  2131   0015C4                     
  2132                           ;MCAL_layer/GPIO/hal_gpio.c: 42:     if(_pin_config == ((void*)0) || _pin_config->pin > 
      +                          8 -1)
  2133   0015C4  504D               	movf	gpio_pin_direction_initialize@_pin_config^0,w,c
  2134   0015C6  B4D8               	btfsc	status,2,c
  2135   0015C8  EFE8  F00A         	goto	u1091
  2136   0015CC  EFEA  F00A         	goto	u1090
  2137   0015D0                     u1091:
  2138   0015D0  EFFA  F00A         	goto	l2182
  2139   0015D4                     u1090:
  2140   0015D4  504D               	movf	gpio_pin_direction_initialize@_pin_config^0,w,c
  2141   0015D6  6ED9               	movwf	fsr2l,c
  2142   0015D8  6ADA               	clrf	fsr2h,c
  2143   0015DA  30DF               	rrcf	223,w,c
  2144   0015DC  32E8               	rrcf	wreg,f,c
  2145   0015DE  32E8               	rrcf	wreg,f,c
  2146   0015E0  0B07               	andlw	7
  2147   0015E2  6E4E               	movwf	??_gpio_pin_direction_initialize^0,c
  2148   0015E4  0E07               	movlw	7
  2149   0015E6  644E               	cpfsgt	??_gpio_pin_direction_initialize^0,c
  2150   0015E8  EFF8  F00A         	goto	u1101
  2151   0015EC  EFFA  F00A         	goto	u1100
  2152   0015F0                     u1101:
  2153   0015F0  EF51  F00B         	goto	l2190
  2154   0015F4                     u1100:
  2155   0015F4                     l2182:
  2156                           
  2157                           ;MCAL_layer/GPIO/hal_gpio.c: 45:     }
  2158   0015F4  EF71  F00B         	goto	l424
  2159   0015F8                     l2184:
  2160                           
  2161                           ;MCAL_layer/GPIO/hal_gpio.c: 51:                 (*(tris_registers[_pin_config->port]) &
      +                          = ~(1 << _pin_config->pin));
  2162   0015F8  504D               	movf	gpio_pin_direction_initialize@_pin_config^0,w,c
  2163   0015FA  6ED9               	movwf	fsr2l,c
  2164   0015FC  6ADA               	clrf	fsr2h,c
  2165   0015FE  30DF               	rrcf	223,w,c
  2166   001600  32E8               	rrcf	wreg,f,c
  2167   001602  32E8               	rrcf	wreg,f,c
  2168   001604  0B07               	andlw	7
  2169   001606  6E4E               	movwf	??_gpio_pin_direction_initialize^0,c
  2170   001608  0E01               	movlw	1
  2171   00160A  6E4F               	movwf	(??_gpio_pin_direction_initialize+1)^0,c
  2172   00160C  2A4E               	incf	??_gpio_pin_direction_initialize^0,f,c
  2173   00160E  EF0B  F00B         	goto	u1114
  2174   001612                     u1115:
  2175   001612  90D8               	bcf	status,0,c
  2176   001614  364F               	rlcf	(??_gpio_pin_direction_initialize+1)^0,f,c
  2177   001616                     u1114:
  2178   001616  2E4E               	decfsz	??_gpio_pin_direction_initialize^0,f,c
  2179   001618  EF09  F00B         	goto	u1115
  2180   00161C  504F               	movf	(??_gpio_pin_direction_initialize+1)^0,w,c
  2181   00161E  0AFF               	xorlw	255
  2182   001620  6E50               	movwf	(??_gpio_pin_direction_initialize+2)^0,c
  2183   001622  504D               	movf	gpio_pin_direction_initialize@_pin_config^0,w,c
  2184   001624  6ED9               	movwf	fsr2l,c
  2185   001626  6ADA               	clrf	fsr2h,c
  2186   001628  50DF               	movf	223,w,c
  2187   00162A  0B07               	andlw	7
  2188   00162C  0D02               	mullw	2
  2189   00162E  50F3               	movf	243,w,c
  2190   001630  0F15               	addlw	low _tris_registers
  2191   001632  6ED9               	movwf	fsr2l,c
  2192   001634  6ADA               	clrf	fsr2h,c
  2193   001636  CFDE F051          	movff	postinc2,??_gpio_pin_direction_initialize+3
  2194   00163A  CFDD F052          	movff	postdec2,??_gpio_pin_direction_initialize+4
  2195   00163E  C051  FFD9         	movff	??_gpio_pin_direction_initialize+3,fsr2l
  2196   001642  C052  FFDA         	movff	??_gpio_pin_direction_initialize+4,fsr2h
  2197   001646  5050               	movf	(??_gpio_pin_direction_initialize+2)^0,w,c
  2198   001648  16DF               	andwf	indf2,f,c
  2199                           
  2200                           ;MCAL_layer/GPIO/hal_gpio.c: 52:                 break;
  2201   00164A  EF71  F00B         	goto	l2192
  2202   00164E                     l2186:
  2203                           
  2204                           ;MCAL_layer/GPIO/hal_gpio.c: 54:                 (*(tris_registers[_pin_config->port]) |
      +                          = (1 << _pin_config->pin));
  2205   00164E  504D               	movf	gpio_pin_direction_initialize@_pin_config^0,w,c
  2206   001650  6ED9               	movwf	fsr2l,c
  2207   001652  6ADA               	clrf	fsr2h,c
  2208   001654  30DF               	rrcf	223,w,c
  2209   001656  32E8               	rrcf	wreg,f,c
  2210   001658  32E8               	rrcf	wreg,f,c
  2211   00165A  0B07               	andlw	7
  2212   00165C  6E4E               	movwf	??_gpio_pin_direction_initialize^0,c
  2213   00165E  0E01               	movlw	1
  2214   001660  6E4F               	movwf	(??_gpio_pin_direction_initialize+1)^0,c
  2215   001662  2A4E               	incf	??_gpio_pin_direction_initialize^0,f,c
  2216   001664  EF36  F00B         	goto	u1124
  2217   001668                     u1125:
  2218   001668  90D8               	bcf	status,0,c
  2219   00166A  364F               	rlcf	(??_gpio_pin_direction_initialize+1)^0,f,c
  2220   00166C                     u1124:
  2221   00166C  2E4E               	decfsz	??_gpio_pin_direction_initialize^0,f,c
  2222   00166E  EF34  F00B         	goto	u1125
  2223   001672  504D               	movf	gpio_pin_direction_initialize@_pin_config^0,w,c
  2224   001674  6ED9               	movwf	fsr2l,c
  2225   001676  6ADA               	clrf	fsr2h,c
  2226   001678  50DF               	movf	223,w,c
  2227   00167A  0B07               	andlw	7
  2228   00167C  0D02               	mullw	2
  2229   00167E  50F3               	movf	243,w,c
  2230   001680  0F15               	addlw	low _tris_registers
  2231   001682  6ED9               	movwf	fsr2l,c
  2232   001684  6ADA               	clrf	fsr2h,c
  2233   001686  CFDE F050          	movff	postinc2,??_gpio_pin_direction_initialize+2
  2234   00168A  CFDD F051          	movff	postdec2,??_gpio_pin_direction_initialize+3
  2235   00168E  C050  FFD9         	movff	??_gpio_pin_direction_initialize+2,fsr2l
  2236   001692  C051  FFDA         	movff	??_gpio_pin_direction_initialize+3,fsr2h
  2237   001696  504F               	movf	(??_gpio_pin_direction_initialize+1)^0,w,c
  2238   001698  12DF               	iorwf	indf2,f,c
  2239                           
  2240                           ;MCAL_layer/GPIO/hal_gpio.c: 55:                 break;
  2241   00169A  EF71  F00B         	goto	l2192
  2242   00169E                     l2188:
  2243                           
  2244                           ;MCAL_layer/GPIO/hal_gpio.c: 58:         }
  2245   00169E  EF71  F00B         	goto	l2192
  2246   0016A2                     l2190:
  2247   0016A2  504D               	movf	gpio_pin_direction_initialize@_pin_config^0,w,c
  2248   0016A4  6ED9               	movwf	fsr2l,c
  2249   0016A6  6ADA               	clrf	fsr2h,c
  2250   0016A8  BEDF               	btfsc	indf2,7,c
  2251   0016AA  EF59  F00B         	goto	u1131
  2252   0016AE  EF5C  F00B         	goto	u1130
  2253   0016B2                     u1131:
  2254   0016B2  0E01               	movlw	1
  2255   0016B4  EF5D  F00B         	goto	u1140
  2256   0016B8                     u1130:
  2257   0016B8  0E00               	movlw	0
  2258   0016BA                     u1140:
  2259   0016BA  6E4E               	movwf	??_gpio_pin_direction_initialize^0,c
  2260   0016BC  6A4F               	clrf	(??_gpio_pin_direction_initialize+1)^0,c
  2261                           
  2262                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2263                           ; Switch size 1, requested type "simple"
  2264                           ; Number of cases is 1, Range of values is 0 to 0
  2265                           ; switch strategies available:
  2266                           ; Name         Instructions Cycles
  2267                           ; simple_byte            4     3 (average)
  2268                           ;	Chosen strategy is simple_byte
  2269   0016BE  504F               	movf	(??_gpio_pin_direction_initialize+1)^0,w,c
  2270   0016C0  0A00               	xorlw	0	; case 0
  2271   0016C2  B4D8               	btfsc	status,2,c
  2272   0016C4  EF66  F00B         	goto	l2862
  2273   0016C8  EF4F  F00B         	goto	l2188
  2274   0016CC                     l2862:
  2275                           
  2276                           ; Switch size 1, requested type "simple"
  2277                           ; Number of cases is 2, Range of values is 0 to 1
  2278                           ; switch strategies available:
  2279                           ; Name         Instructions Cycles
  2280                           ; simple_byte            7     4 (average)
  2281                           ;	Chosen strategy is simple_byte
  2282   0016CC  504E               	movf	??_gpio_pin_direction_initialize^0,w,c
  2283   0016CE  0A00               	xorlw	0	; case 0
  2284   0016D0  B4D8               	btfsc	status,2,c
  2285   0016D2  EFFC  F00A         	goto	l2184
  2286   0016D6  0A01               	xorlw	1	; case 1
  2287   0016D8  B4D8               	btfsc	status,2,c
  2288   0016DA  EF27  F00B         	goto	l2186
  2289   0016DE  EF4F  F00B         	goto	l2188
  2290   0016E2                     l2192:
  2291   0016E2                     l424:
  2292   0016E2  0012               	return		;funcret
  2293   0016E4                     __end_of_gpio_pin_direction_initialize:
  2294                           	callstack 0
  2295                           
  2296 ;; *************** function ___awmod *****************
  2297 ;; Defined at:
  2298 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awmod.c"
  2299 ;; Parameters:    Size  Location     Type
  2300 ;;  dividend        2    0[COMRAM] int 
  2301 ;;  divisor         2    2[COMRAM] int 
  2302 ;; Auto vars:     Size  Location     Type
  2303 ;;  sign            1    5[COMRAM] unsigned char 
  2304 ;;  counter         1    4[COMRAM] unsigned char 
  2305 ;; Return value:  Size  Location     Type
  2306 ;;                  2    0[COMRAM] int 
  2307 ;; Registers used:
  2308 ;;		wreg, status,2, status,0
  2309 ;; Tracked objects:
  2310 ;;		On entry : 0/0
  2311 ;;		On exit  : 0/0
  2312 ;;		Unchanged: 0/0
  2313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2314 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2315 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2317 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2318 ;;Total ram usage:        6 bytes
  2319 ;; Hardware stack levels used: 1
  2320 ;; This function calls:
  2321 ;;		Nothing
  2322 ;; This function is called by:
  2323 ;;		_main
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           	psect	text8
  2328   00196A                     __ptext8:
  2329                           	callstack 0
  2330   00196A                     ___awmod:
  2331                           	callstack 30
  2332   00196A  0E00               	movlw	0
  2333   00196C  6E52               	movwf	___awmod@sign^0,c
  2334   00196E  BE4E               	btfsc	(___awmod@dividend+1)^0,7,c
  2335   001970  EFBE  F00C         	goto	u1410
  2336   001974  EFBC  F00C         	goto	u1411
  2337   001978                     u1411:
  2338   001978  EFC4  F00C         	goto	l2382
  2339   00197C                     u1410:
  2340   00197C  6C4D               	negf	___awmod@dividend^0,c
  2341   00197E  1E4E               	comf	(___awmod@dividend+1)^0,f,c
  2342   001980  B0D8               	btfsc	status,0,c
  2343   001982  2A4E               	incf	(___awmod@dividend+1)^0,f,c
  2344   001984  0E01               	movlw	1
  2345   001986  6E52               	movwf	___awmod@sign^0,c
  2346   001988                     l2382:
  2347   001988  BE50               	btfsc	(___awmod@divisor+1)^0,7,c
  2348   00198A  EFCB  F00C         	goto	u1420
  2349   00198E  EFC9  F00C         	goto	u1421
  2350   001992                     u1421:
  2351   001992  EFCF  F00C         	goto	l2386
  2352   001996                     u1420:
  2353   001996  6C4F               	negf	___awmod@divisor^0,c
  2354   001998  1E50               	comf	(___awmod@divisor+1)^0,f,c
  2355   00199A  B0D8               	btfsc	status,0,c
  2356   00199C  2A50               	incf	(___awmod@divisor+1)^0,f,c
  2357   00199E                     l2386:
  2358   00199E  504F               	movf	___awmod@divisor^0,w,c
  2359   0019A0  1050               	iorwf	(___awmod@divisor+1)^0,w,c
  2360   0019A2  B4D8               	btfsc	status,2,c
  2361   0019A4  EFD6  F00C         	goto	u1431
  2362   0019A8  EFD8  F00C         	goto	u1430
  2363   0019AC                     u1431:
  2364   0019AC  EFFC  F00C         	goto	l2402
  2365   0019B0                     u1430:
  2366   0019B0  0E01               	movlw	1
  2367   0019B2  6E51               	movwf	___awmod@counter^0,c
  2368   0019B4  EFE0  F00C         	goto	l2392
  2369   0019B8                     l2390:
  2370   0019B8  90D8               	bcf	status,0,c
  2371   0019BA  364F               	rlcf	___awmod@divisor^0,f,c
  2372   0019BC  3650               	rlcf	(___awmod@divisor+1)^0,f,c
  2373   0019BE  2A51               	incf	___awmod@counter^0,f,c
  2374   0019C0                     l2392:
  2375   0019C0  AE50               	btfss	(___awmod@divisor+1)^0,7,c
  2376   0019C2  EFE5  F00C         	goto	u1441
  2377   0019C6  EFE7  F00C         	goto	u1440
  2378   0019CA                     u1441:
  2379   0019CA  EFDC  F00C         	goto	l2390
  2380   0019CE                     u1440:
  2381   0019CE                     l2394:
  2382   0019CE  504F               	movf	___awmod@divisor^0,w,c
  2383   0019D0  5C4D               	subwf	___awmod@dividend^0,w,c
  2384   0019D2  5050               	movf	(___awmod@divisor+1)^0,w,c
  2385   0019D4  584E               	subwfb	(___awmod@dividend+1)^0,w,c
  2386   0019D6  A0D8               	btfss	status,0,c
  2387   0019D8  EFF0  F00C         	goto	u1451
  2388   0019DC  EFF2  F00C         	goto	u1450
  2389   0019E0                     u1451:
  2390   0019E0  EFF6  F00C         	goto	l2398
  2391   0019E4                     u1450:
  2392   0019E4  504F               	movf	___awmod@divisor^0,w,c
  2393   0019E6  5E4D               	subwf	___awmod@dividend^0,f,c
  2394   0019E8  5050               	movf	(___awmod@divisor+1)^0,w,c
  2395   0019EA  5A4E               	subwfb	(___awmod@dividend+1)^0,f,c
  2396   0019EC                     l2398:
  2397   0019EC  90D8               	bcf	status,0,c
  2398   0019EE  3250               	rrcf	(___awmod@divisor+1)^0,f,c
  2399   0019F0  324F               	rrcf	___awmod@divisor^0,f,c
  2400   0019F2  2E51               	decfsz	___awmod@counter^0,f,c
  2401   0019F4  EFE7  F00C         	goto	l2394
  2402   0019F8                     l2402:
  2403   0019F8  5052               	movf	___awmod@sign^0,w,c
  2404   0019FA  B4D8               	btfsc	status,2,c
  2405   0019FC  EF02  F00D         	goto	u1461
  2406   001A00  EF04  F00D         	goto	u1460
  2407   001A04                     u1461:
  2408   001A04  EF08  F00D         	goto	l2406
  2409   001A08                     u1460:
  2410   001A08  6C4D               	negf	___awmod@dividend^0,c
  2411   001A0A  1E4E               	comf	(___awmod@dividend+1)^0,f,c
  2412   001A0C  B0D8               	btfsc	status,0,c
  2413   001A0E  2A4E               	incf	(___awmod@dividend+1)^0,f,c
  2414   001A10                     l2406:
  2415   001A10  C04D  F04D         	movff	___awmod@dividend,?___awmod
  2416   001A14  C04E  F04E         	movff	___awmod@dividend+1,?___awmod+1
  2417   001A18  0012               	return		;funcret
  2418   001A1A                     __end_of___awmod:
  2419                           	callstack 0
  2420                           
  2421 ;; *************** function ___awdiv *****************
  2422 ;; Defined at:
  2423 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\awdiv.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;  dividend        2    0[COMRAM] int 
  2426 ;;  divisor         2    2[COMRAM] int 
  2427 ;; Auto vars:     Size  Location     Type
  2428 ;;  quotient        2    6[COMRAM] int 
  2429 ;;  sign            1    5[COMRAM] unsigned char 
  2430 ;;  counter         1    4[COMRAM] unsigned char 
  2431 ;; Return value:  Size  Location     Type
  2432 ;;                  2    0[COMRAM] int 
  2433 ;; Registers used:
  2434 ;;		wreg, status,2, status,0
  2435 ;; Tracked objects:
  2436 ;;		On entry : 0/0
  2437 ;;		On exit  : 0/0
  2438 ;;		Unchanged: 0/0
  2439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2440 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2441 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2443 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2444 ;;Total ram usage:        8 bytes
  2445 ;; Hardware stack levels used: 1
  2446 ;; This function calls:
  2447 ;;		Nothing
  2448 ;; This function is called by:
  2449 ;;		_main
  2450 ;; This function uses a non-reentrant model
  2451 ;;
  2452                           
  2453                           	psect	text9
  2454   0017F4                     __ptext9:
  2455                           	callstack 0
  2456   0017F4                     ___awdiv:
  2457                           	callstack 30
  2458   0017F4  0E00               	movlw	0
  2459   0017F6  6E52               	movwf	___awdiv@sign^0,c
  2460   0017F8  BE50               	btfsc	(___awdiv@divisor+1)^0,7,c
  2461   0017FA  EF03  F00C         	goto	u1350
  2462   0017FE  EF01  F00C         	goto	u1351
  2463   001802                     u1351:
  2464   001802  EF09  F00C         	goto	l2338
  2465   001806                     u1350:
  2466   001806  6C4F               	negf	___awdiv@divisor^0,c
  2467   001808  1E50               	comf	(___awdiv@divisor+1)^0,f,c
  2468   00180A  B0D8               	btfsc	status,0,c
  2469   00180C  2A50               	incf	(___awdiv@divisor+1)^0,f,c
  2470   00180E  0E01               	movlw	1
  2471   001810  6E52               	movwf	___awdiv@sign^0,c
  2472   001812                     l2338:
  2473   001812  BE4E               	btfsc	(___awdiv@dividend+1)^0,7,c
  2474   001814  EF10  F00C         	goto	u1360
  2475   001818  EF0E  F00C         	goto	u1361
  2476   00181C                     u1361:
  2477   00181C  EF16  F00C         	goto	l2344
  2478   001820                     u1360:
  2479   001820  6C4D               	negf	___awdiv@dividend^0,c
  2480   001822  1E4E               	comf	(___awdiv@dividend+1)^0,f,c
  2481   001824  B0D8               	btfsc	status,0,c
  2482   001826  2A4E               	incf	(___awdiv@dividend+1)^0,f,c
  2483   001828  0E01               	movlw	1
  2484   00182A  1A52               	xorwf	___awdiv@sign^0,f,c
  2485   00182C                     l2344:
  2486   00182C  0E00               	movlw	0
  2487   00182E  6E54               	movwf	(___awdiv@quotient+1)^0,c
  2488   001830  0E00               	movlw	0
  2489   001832  6E53               	movwf	___awdiv@quotient^0,c
  2490   001834  504F               	movf	___awdiv@divisor^0,w,c
  2491   001836  1050               	iorwf	(___awdiv@divisor+1)^0,w,c
  2492   001838  B4D8               	btfsc	status,2,c
  2493   00183A  EF21  F00C         	goto	u1371
  2494   00183E  EF23  F00C         	goto	u1370
  2495   001842                     u1371:
  2496   001842  EF4B  F00C         	goto	l2366
  2497   001846                     u1370:
  2498   001846  0E01               	movlw	1
  2499   001848  6E51               	movwf	___awdiv@counter^0,c
  2500   00184A  EF2B  F00C         	goto	l2352
  2501   00184E                     l2350:
  2502   00184E  90D8               	bcf	status,0,c
  2503   001850  364F               	rlcf	___awdiv@divisor^0,f,c
  2504   001852  3650               	rlcf	(___awdiv@divisor+1)^0,f,c
  2505   001854  2A51               	incf	___awdiv@counter^0,f,c
  2506   001856                     l2352:
  2507   001856  AE50               	btfss	(___awdiv@divisor+1)^0,7,c
  2508   001858  EF30  F00C         	goto	u1381
  2509   00185C  EF32  F00C         	goto	u1380
  2510   001860                     u1381:
  2511   001860  EF27  F00C         	goto	l2350
  2512   001864                     u1380:
  2513   001864                     l2354:
  2514   001864  90D8               	bcf	status,0,c
  2515   001866  3653               	rlcf	___awdiv@quotient^0,f,c
  2516   001868  3654               	rlcf	(___awdiv@quotient+1)^0,f,c
  2517   00186A  504F               	movf	___awdiv@divisor^0,w,c
  2518   00186C  5C4D               	subwf	___awdiv@dividend^0,w,c
  2519   00186E  5050               	movf	(___awdiv@divisor+1)^0,w,c
  2520   001870  584E               	subwfb	(___awdiv@dividend+1)^0,w,c
  2521   001872  A0D8               	btfss	status,0,c
  2522   001874  EF3E  F00C         	goto	u1391
  2523   001878  EF40  F00C         	goto	u1390
  2524   00187C                     u1391:
  2525   00187C  EF45  F00C         	goto	l2362
  2526   001880                     u1390:
  2527   001880  504F               	movf	___awdiv@divisor^0,w,c
  2528   001882  5E4D               	subwf	___awdiv@dividend^0,f,c
  2529   001884  5050               	movf	(___awdiv@divisor+1)^0,w,c
  2530   001886  5A4E               	subwfb	(___awdiv@dividend+1)^0,f,c
  2531   001888  8053               	bsf	___awdiv@quotient^0,0,c
  2532   00188A                     l2362:
  2533   00188A  90D8               	bcf	status,0,c
  2534   00188C  3250               	rrcf	(___awdiv@divisor+1)^0,f,c
  2535   00188E  324F               	rrcf	___awdiv@divisor^0,f,c
  2536   001890  2E51               	decfsz	___awdiv@counter^0,f,c
  2537   001892  EF32  F00C         	goto	l2354
  2538   001896                     l2366:
  2539   001896  5052               	movf	___awdiv@sign^0,w,c
  2540   001898  B4D8               	btfsc	status,2,c
  2541   00189A  EF51  F00C         	goto	u1401
  2542   00189E  EF53  F00C         	goto	u1400
  2543   0018A2                     u1401:
  2544   0018A2  EF57  F00C         	goto	l2370
  2545   0018A6                     u1400:
  2546   0018A6  6C53               	negf	___awdiv@quotient^0,c
  2547   0018A8  1E54               	comf	(___awdiv@quotient+1)^0,f,c
  2548   0018AA  B0D8               	btfsc	status,0,c
  2549   0018AC  2A54               	incf	(___awdiv@quotient+1)^0,f,c
  2550   0018AE                     l2370:
  2551   0018AE  C053  F04D         	movff	___awdiv@quotient,?___awdiv
  2552   0018B2  C054  F04E         	movff	___awdiv@quotient+1,?___awdiv+1
  2553   0018B6  0012               	return		;funcret
  2554   0018B8                     __end_of___awdiv:
  2555                           	callstack 0
  2556                           
  2557 ;; *************** function _Button_read *****************
  2558 ;; Defined at:
  2559 ;;		line 38 in file "ECU_layer/Button/Button.c"
  2560 ;; Parameters:    Size  Location     Type
  2561 ;;  btn             1    8[COMRAM] PTR const struct .
  2562 ;;		 -> reset(3), pause(3), speed_up(3), stop(3), 
  2563 ;;		 -> start(3), 
  2564 ;;  _st             1    9[COMRAM] PTR enum E2874
  2565 ;;		 -> stop_state(1), reset_state(1), pause_state(1), speed_state(1), 
  2566 ;;		 -> start_state(1), 
  2567 ;; Auto vars:     Size  Location     Type
  2568 ;;  button_logic    1   12[COMRAM] enum E2821
  2569 ;;  ret             1   11[COMRAM] unsigned char 
  2570 ;; Return value:  Size  Location     Type
  2571 ;;                  1    wreg      unsigned char 
  2572 ;; Registers used:
  2573 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2574 ;; Tracked objects:
  2575 ;;		On entry : 0/0
  2576 ;;		On exit  : 0/0
  2577 ;;		Unchanged: 0/0
  2578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2579 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2580 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2581 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2582 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2583 ;;Total ram usage:        5 bytes
  2584 ;; Hardware stack levels used: 1
  2585 ;; Hardware stack levels required when called: 1
  2586 ;; This function calls:
  2587 ;;		_gpio_pin_read_logic
  2588 ;; This function is called by:
  2589 ;;		_main
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592                           
  2593                           	psect	text10
  2594   0018B8                     __ptext10:
  2595                           	callstack 0
  2596   0018B8                     _Button_read:
  2597                           	callstack 29
  2598   0018B8                     
  2599                           ;ECU_layer/Button/Button.c: 41:     logic_t button_logic = GPIO_LOGIC_LOW;
  2600   0018B8  0E00               	movlw	0
  2601   0018BA  6E59               	movwf	Button_read@button_logic^0,c
  2602                           
  2603                           ;ECU_layer/Button/Button.c: 42:     if(btn == ((void*)0) || _st == ((void*)0))
  2604   0018BC  5055               	movf	Button_read@btn^0,w,c
  2605   0018BE  B4D8               	btfsc	status,2,c
  2606   0018C0  EF64  F00C         	goto	u1251
  2607   0018C4  EF66  F00C         	goto	u1250
  2608   0018C8                     u1251:
  2609   0018C8  EF6E  F00C         	goto	l2272
  2610   0018CC                     u1250:
  2611   0018CC  5056               	movf	Button_read@_st^0,w,c
  2612   0018CE  A4D8               	btfss	status,2,c
  2613   0018D0  EF6C  F00C         	goto	u1261
  2614   0018D4  EF6E  F00C         	goto	u1260
  2615   0018D8                     u1261:
  2616   0018D8  EF72  F00C         	goto	l2274
  2617   0018DC                     u1260:
  2618   0018DC                     l2272:
  2619                           
  2620                           ;ECU_layer/Button/Button.c: 43:     {;ECU_layer/Button/Button.c: 44:         ret = (Std_
      +                          ReturnType) 0x00;
  2621   0018DC  0E00               	movlw	0
  2622   0018DE  6E58               	movwf	Button_read@ret^0,c
  2623                           
  2624                           ;ECU_layer/Button/Button.c: 45:     }
  2625   0018E0  EFB3  F00C         	goto	l103
  2626   0018E4                     l2274:
  2627                           
  2628                           ;ECU_layer/Button/Button.c: 47:     {;ECU_layer/Button/Button.c: 48:         gpio_pin_re
      +                          ad_logic(&(btn->button) ,&button_logic);
  2629   0018E4  C055  F04D         	movff	Button_read@btn,gpio_pin_read_logic@_pin_config
  2630   0018E8  0E59               	movlw	low Button_read@button_logic
  2631   0018EA  6E4E               	movwf	gpio_pin_read_logic@logic^0,c
  2632   0018EC  EC0D  F00D         	call	_gpio_pin_read_logic	;wreg free
  2633   0018F0                     
  2634                           ;ECU_layer/Button/Button.c: 49:         if(btn->active == BUTTON_ACTIVE_HIGH)
  2635   0018F0  5055               	movf	Button_read@btn^0,w,c
  2636   0018F2  6ED9               	movwf	fsr2l,c
  2637   0018F4  6ADA               	clrf	fsr2h,c
  2638   0018F6  0E02               	movlw	2
  2639   0018F8  26D9               	addwf	fsr2l,f,c
  2640   0018FA  04DE               	decf	postinc2,w,c
  2641   0018FC  A4D8               	btfss	status,2,c
  2642   0018FE  EF83  F00C         	goto	u1271
  2643   001902  EF85  F00C         	goto	u1270
  2644   001906                     u1271:
  2645   001906  EF9A  F00C         	goto	l2284
  2646   00190A                     u1270:
  2647   00190A                     
  2648                           ;ECU_layer/Button/Button.c: 50:         {;ECU_layer/Button/Button.c: 51:             if(
      +                          button_logic == GPIO_LOGIC_LOW)
  2649   00190A  5059               	movf	Button_read@button_logic^0,w,c
  2650   00190C  A4D8               	btfss	status,2,c
  2651   00190E  EF8B  F00C         	goto	u1281
  2652   001912  EF8D  F00C         	goto	u1280
  2653   001916                     u1281:
  2654   001916  EF93  F00C         	goto	l2282
  2655   00191A                     u1280:
  2656   00191A                     l2280:
  2657                           
  2658                           ;ECU_layer/Button/Button.c: 52:             {;ECU_layer/Button/Button.c: 53:            
      +                               *_st = BUTTON_RELEASED;
  2659   00191A  5056               	movf	Button_read@_st^0,w,c
  2660   00191C  6ED9               	movwf	fsr2l,c
  2661   00191E  6ADA               	clrf	fsr2h,c
  2662   001920  6ADF               	clrf	indf2,c
  2663                           
  2664                           ;ECU_layer/Button/Button.c: 54:             }
  2665   001922  EFB1  F00C         	goto	l2292
  2666   001926                     l2282:
  2667                           
  2668                           ;ECU_layer/Button/Button.c: 56:             {;ECU_layer/Button/Button.c: 57:            
      +                               *_st = BUTTON_PRESSED;
  2669   001926  5056               	movf	Button_read@_st^0,w,c
  2670   001928  6ED9               	movwf	fsr2l,c
  2671   00192A  6ADA               	clrf	fsr2h,c
  2672   00192C  0E01               	movlw	1
  2673   00192E  6EDF               	movwf	indf2,c
  2674   001930  EFB1  F00C         	goto	l2292
  2675   001934                     l2284:
  2676   001934  5055               	movf	Button_read@btn^0,w,c
  2677   001936  6ED9               	movwf	fsr2l,c
  2678   001938  6ADA               	clrf	fsr2h,c
  2679   00193A  0E02               	movlw	2
  2680   00193C  26D9               	addwf	fsr2l,f,c
  2681   00193E  50DF               	movf	indf2,w,c
  2682   001940  A4D8               	btfss	status,2,c
  2683   001942  EFA5  F00C         	goto	u1291
  2684   001946  EFA7  F00C         	goto	u1290
  2685   00194A                     u1291:
  2686   00194A  EFB1  F00C         	goto	l2292
  2687   00194E                     u1290:
  2688   00194E                     
  2689                           ;ECU_layer/Button/Button.c: 61:         {;ECU_layer/Button/Button.c: 62:             if(
      +                          button_logic == GPIO_LOGIC_LOW)
  2690   00194E  5059               	movf	Button_read@button_logic^0,w,c
  2691   001950  A4D8               	btfss	status,2,c
  2692   001952  EFAD  F00C         	goto	u1301
  2693   001956  EFAF  F00C         	goto	u1300
  2694   00195A                     u1301:
  2695   00195A  EF8D  F00C         	goto	l2280
  2696   00195E                     u1300:
  2697   00195E  EF93  F00C         	goto	l2282
  2698   001962                     l2292:
  2699                           
  2700                           ;ECU_layer/Button/Button.c: 75:         ret = (Std_ReturnType) 0x01;
  2701   001962  0E01               	movlw	1
  2702   001964  6E58               	movwf	Button_read@ret^0,c
  2703   001966                     l103:
  2704                           
  2705                           ;ECU_layer/Button/Button.c: 77:     return ret;
  2706   001966  5058               	movf	Button_read@ret^0,w,c
  2707   001968  0012               	return		;funcret
  2708   00196A                     __end_of_Button_read:
  2709                           	callstack 0
  2710                           
  2711 ;; *************** function _gpio_pin_read_logic *****************
  2712 ;; Defined at:
  2713 ;;		line 125 in file "MCAL_layer/GPIO/hal_gpio.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;  _pin_config     1    0[COMRAM] PTR const struct .
  2716 ;;		 -> reset(3), pause(3), speed_up(3), stop(3), 
  2717 ;;		 -> start(3), 
  2718 ;;  logic           1    1[COMRAM] PTR enum E2821
  2719 ;;		 -> keypad_get_value@column_logic(1), Button_read@button_logic(1), 
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;  ret             1    7[COMRAM] unsigned char 
  2722 ;; Return value:  Size  Location     Type
  2723 ;;                  1    wreg      unsigned char 
  2724 ;; Registers used:
  2725 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2726 ;; Tracked objects:
  2727 ;;		On entry : 0/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2731 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2733 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2734 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2735 ;;Total ram usage:        8 bytes
  2736 ;; Hardware stack levels used: 1
  2737 ;; This function calls:
  2738 ;;		Nothing
  2739 ;; This function is called by:
  2740 ;;		_Button_read
  2741 ;;		_keypad_get_value
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text11
  2746   001A1A                     __ptext11:
  2747                           	callstack 0
  2748   001A1A                     _gpio_pin_read_logic:
  2749                           	callstack 29
  2750   001A1A                     
  2751                           ;MCAL_layer/GPIO/hal_gpio.c: 128:     if(_pin_config == ((void*)0) || _pin_config->pin >
      +                           8 -1 || logic == ((void*)0))
  2752   001A1A  504D               	movf	gpio_pin_read_logic@_pin_config^0,w,c
  2753   001A1C  B4D8               	btfsc	status,2,c
  2754   001A1E  EF13  F00D         	goto	u1191
  2755   001A22  EF15  F00D         	goto	u1190
  2756   001A26                     u1191:
  2757   001A26  EF2D  F00D         	goto	l2244
  2758   001A2A                     u1190:
  2759   001A2A  504D               	movf	gpio_pin_read_logic@_pin_config^0,w,c
  2760   001A2C  6ED9               	movwf	fsr2l,c
  2761   001A2E  6ADA               	clrf	fsr2h,c
  2762   001A30  30DF               	rrcf	223,w,c
  2763   001A32  32E8               	rrcf	wreg,f,c
  2764   001A34  32E8               	rrcf	wreg,f,c
  2765   001A36  0B07               	andlw	7
  2766   001A38  6E4F               	movwf	??_gpio_pin_read_logic^0,c
  2767   001A3A  0E08               	movlw	8
  2768   001A3C  604F               	cpfslt	??_gpio_pin_read_logic^0,c
  2769   001A3E  EF23  F00D         	goto	u1201
  2770   001A42  EF25  F00D         	goto	u1200
  2771   001A46                     u1201:
  2772   001A46  EF2D  F00D         	goto	l2244
  2773   001A4A                     u1200:
  2774   001A4A  504E               	movf	gpio_pin_read_logic@logic^0,w,c
  2775   001A4C  A4D8               	btfss	status,2,c
  2776   001A4E  EF2B  F00D         	goto	u1211
  2777   001A52  EF2D  F00D         	goto	u1210
  2778   001A56                     u1211:
  2779   001A56  EF31  F00D         	goto	l2246
  2780   001A5A                     u1210:
  2781   001A5A                     l2244:
  2782                           
  2783                           ;MCAL_layer/GPIO/hal_gpio.c: 129:     {;MCAL_layer/GPIO/hal_gpio.c: 130:         ret = (
      +                          Std_ReturnType) 0x00;
  2784   001A5A  0E00               	movlw	0
  2785   001A5C  6E54               	movwf	gpio_pin_read_logic@ret^0,c
  2786                           
  2787                           ;MCAL_layer/GPIO/hal_gpio.c: 131:     }
  2788   001A5E  EF5F  F00D         	goto	l2250
  2789   001A62                     l2246:
  2790                           
  2791                           ;MCAL_layer/GPIO/hal_gpio.c: 133:     {;MCAL_layer/GPIO/hal_gpio.c: 134:         *logic 
      +                          = (*port_registers[_pin_config->port] & (1 << _pin_config->pin));
  2792   001A62  504E               	movf	gpio_pin_read_logic@logic^0,w,c
  2793   001A64  6ED9               	movwf	fsr2l,c
  2794   001A66  6ADA               	clrf	fsr2h,c
  2795   001A68  504D               	movf	gpio_pin_read_logic@_pin_config^0,w,c
  2796   001A6A  6EE1               	movwf	fsr1l,c
  2797   001A6C  6AE2               	clrf	fsr1h,c
  2798   001A6E  50E7               	movf	231,w,c
  2799   001A70  0B07               	andlw	7
  2800   001A72  0D02               	mullw	2
  2801   001A74  50F3               	movf	243,w,c
  2802   001A76  0F01               	addlw	low _port_registers
  2803   001A78  6EE1               	movwf	fsr1l,c
  2804   001A7A  6AE2               	clrf	fsr1h,c
  2805   001A7C  CFE6 F04F          	movff	postinc1,??_gpio_pin_read_logic
  2806   001A80  CFE5 F050          	movff	postdec1,??_gpio_pin_read_logic+1
  2807   001A84  C04F  FFE1         	movff	??_gpio_pin_read_logic,fsr1l
  2808   001A88  C050  FFE2         	movff	??_gpio_pin_read_logic+1,fsr1h
  2809   001A8C  50E7               	movf	indf1,w,c
  2810   001A8E  6E51               	movwf	(??_gpio_pin_read_logic+2)^0,c
  2811   001A90  504D               	movf	gpio_pin_read_logic@_pin_config^0,w,c
  2812   001A92  6EE1               	movwf	fsr1l,c
  2813   001A94  6AE2               	clrf	fsr1h,c
  2814   001A96  30E7               	rrcf	231,w,c
  2815   001A98  32E8               	rrcf	wreg,f,c
  2816   001A9A  32E8               	rrcf	wreg,f,c
  2817   001A9C  0B07               	andlw	7
  2818   001A9E  6E52               	movwf	(??_gpio_pin_read_logic+3)^0,c
  2819   001AA0  0E01               	movlw	1
  2820   001AA2  6E53               	movwf	(??_gpio_pin_read_logic+4)^0,c
  2821   001AA4  2A52               	incf	(??_gpio_pin_read_logic+3)^0,f,c
  2822   001AA6  EF57  F00D         	goto	u1224
  2823   001AAA                     u1225:
  2824   001AAA  90D8               	bcf	status,0,c
  2825   001AAC  3653               	rlcf	(??_gpio_pin_read_logic+4)^0,f,c
  2826   001AAE                     u1224:
  2827   001AAE  2E52               	decfsz	(??_gpio_pin_read_logic+3)^0,f,c
  2828   001AB0  EF55  F00D         	goto	u1225
  2829   001AB4  5053               	movf	(??_gpio_pin_read_logic+4)^0,w,c
  2830   001AB6  1451               	andwf	(??_gpio_pin_read_logic+2)^0,w,c
  2831   001AB8  6EDF               	movwf	indf2,c
  2832   001ABA                     
  2833                           ;MCAL_layer/GPIO/hal_gpio.c: 135:         ret = (Std_ReturnType) 0x01;
  2834   001ABA  0E01               	movlw	1
  2835   001ABC  6E54               	movwf	gpio_pin_read_logic@ret^0,c
  2836   001ABE                     l2250:
  2837                           
  2838                           ;MCAL_layer/GPIO/hal_gpio.c: 137:     return ret;
  2839   001ABE  5054               	movf	gpio_pin_read_logic@ret^0,w,c
  2840   001AC0  0012               	return		;funcret
  2841   001AC2                     __end_of_gpio_pin_read_logic:
  2842                           	callstack 0
  2843                           
  2844                           	psect	rparam
  2845   000000                     
  2846                           	psect	config
  2847                           
  2848                           ; Padding undefined space
  2849   300000                     	org	3145728
  2850   300000  FF                 	db	255
  2851                           
  2852                           ;Config register CONFIG1H @ 0x300001
  2853                           ;	Oscillator Selection bits
  2854                           ;	OSC = HS, HS oscillator
  2855                           ;	Fail-Safe Clock Monitor Enable bit
  2856                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2857                           ;	Internal/External Oscillator Switchover bit
  2858                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2859   300001                     	org	3145729
  2860   300001  02                 	db	2
  2861                           
  2862                           ;Config register CONFIG2L @ 0x300002
  2863                           ;	Power-up Timer Enable bit
  2864                           ;	PWRT = OFF, PWRT disabled
  2865                           ;	Brown-out Reset Enable bits
  2866                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  2867                           ;	Brown Out Reset Voltage bits
  2868                           ;	BORV = 1, 
  2869   300002                     	org	3145730
  2870   300002  09                 	db	9
  2871                           
  2872                           ;Config register CONFIG2H @ 0x300003
  2873                           ;	Watchdog Timer Enable bit
  2874                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  2875                           ;	Watchdog Timer Postscale Select bits
  2876                           ;	WDTPS = 32768, 1:32768
  2877   300003                     	org	3145731
  2878   300003  1E                 	db	30
  2879                           
  2880                           ; Padding undefined space
  2881   300004                     	org	3145732
  2882   300004  FF                 	db	255
  2883                           
  2884                           ;Config register CONFIG3H @ 0x300005
  2885                           ;	CCP2 MUX bit
  2886                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  2887                           ;	PORTB A/D Enable bit
  2888                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  2889                           ;	Low-Power Timer1 Oscillator Enable bit
  2890                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  2891                           ;	MCLR Pin Enable bit
  2892                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  2893   300005                     	org	3145733
  2894   300005  81                 	db	129
  2895                           
  2896                           ;Config register CONFIG4L @ 0x300006
  2897                           ;	Stack Full/Underflow Reset Enable bit
  2898                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2899                           ;	Single-Supply ICSP Enable bit
  2900                           ;	LVP = OFF, Single-Supply ICSP disabled
  2901                           ;	Extended Instruction Set Enable bit
  2902                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2903                           ;	Background Debugger Enable bit
  2904                           ;	DEBUG = 0x1, unprogrammed default
  2905   300006                     	org	3145734
  2906   300006  81                 	db	129
  2907                           
  2908                           ; Padding undefined space
  2909   300007                     	org	3145735
  2910   300007  FF                 	db	255
  2911                           
  2912                           ;Config register CONFIG5L @ 0x300008
  2913                           ;	Code Protection bit
  2914                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  2915                           ;	Code Protection bit
  2916                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  2917                           ;	Code Protection bit
  2918                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  2919                           ;	Code Protection bit
  2920                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  2921   300008                     	org	3145736
  2922   300008  0F                 	db	15
  2923                           
  2924                           ;Config register CONFIG5H @ 0x300009
  2925                           ;	Boot Block Code Protection bit
  2926                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  2927                           ;	Data EEPROM Code Protection bit
  2928                           ;	CPD = OFF, Data EEPROM not code-protected
  2929   300009                     	org	3145737
  2930   300009  C0                 	db	192
  2931                           
  2932                           ;Config register CONFIG6L @ 0x30000A
  2933                           ;	Write Protection bit
  2934                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  2935                           ;	Write Protection bit
  2936                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  2937                           ;	Write Protection bit
  2938                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  2939                           ;	Write Protection bit
  2940                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  2941   30000A                     	org	3145738
  2942   30000A  0F                 	db	15
  2943                           
  2944                           ;Config register CONFIG6H @ 0x30000B
  2945                           ;	Configuration Register Write Protection bit
  2946                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2947                           ;	Boot Block Write Protection bit
  2948                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  2949                           ;	Data EEPROM Write Protection bit
  2950                           ;	WRTD = OFF, Data EEPROM not write-protected
  2951   30000B                     	org	3145739
  2952   30000B  E0                 	db	224
  2953                           
  2954                           ;Config register CONFIG7L @ 0x30000C
  2955                           ;	Table Read Protection bit
  2956                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  2957                           ;	Table Read Protection bit
  2958                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  2959                           ;	Table Read Protection bit
  2960                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  2961                           ;	Table Read Protection bit
  2962                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  2963   30000C                     	org	3145740
  2964   30000C  0F                 	db	15
  2965                           
  2966                           ;Config register CONFIG7H @ 0x30000D
  2967                           ;	Boot Block Table Read Protection bit
  2968                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  2969   30000D                     	org	3145741
  2970   30000D  40                 	db	64
  2971                           tosu	equ	0xFFF
  2972                           tosh	equ	0xFFE
  2973                           tosl	equ	0xFFD
  2974                           stkptr	equ	0xFFC
  2975                           pclatu	equ	0xFFB
  2976                           pclath	equ	0xFFA
  2977                           pcl	equ	0xFF9
  2978                           tblptru	equ	0xFF8
  2979                           tblptrh	equ	0xFF7
  2980                           tblptrl	equ	0xFF6
  2981                           tablat	equ	0xFF5
  2982                           prodh	equ	0xFF4
  2983                           prodl	equ	0xFF3
  2984                           indf0	equ	0xFEF
  2985                           postinc0	equ	0xFEE
  2986                           postdec0	equ	0xFED
  2987                           preinc0	equ	0xFEC
  2988                           plusw0	equ	0xFEB
  2989                           fsr0h	equ	0xFEA
  2990                           fsr0l	equ	0xFE9
  2991                           wreg	equ	0xFE8
  2992                           indf1	equ	0xFE7
  2993                           postinc1	equ	0xFE6
  2994                           postdec1	equ	0xFE5
  2995                           preinc1	equ	0xFE4
  2996                           plusw1	equ	0xFE3
  2997                           fsr1h	equ	0xFE2
  2998                           fsr1l	equ	0xFE1
  2999                           bsr	equ	0xFE0
  3000                           indf2	equ	0xFDF
  3001                           postinc2	equ	0xFDE
  3002                           postdec2	equ	0xFDD
  3003                           preinc2	equ	0xFDC
  3004                           plusw2	equ	0xFDB
  3005                           fsr2h	equ	0xFDA
  3006                           fsr2l	equ	0xFD9
  3007                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    16
    Data        56
    BSS         20
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     20      97
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    Button_initialize@btn	PTR const struct . size(1) Largest target is 3
		 -> pause(COMRAM[3]), reset(COMRAM[3]), speed_up(COMRAM[3]), start(COMRAM[3]), 
		 -> stop(COMRAM[3]), 

    Button_read@_st	PTR enum E2874 size(1) Largest target is 1
		 -> pause_state(COMRAM[1]), reset_state(COMRAM[1]), speed_state(COMRAM[1]), start_state(COMRAM[1]), 
		 -> stop_state(COMRAM[1]), 

    Button_read@btn	PTR const struct . size(1) Largest target is 3
		 -> pause(COMRAM[3]), reset(COMRAM[3]), speed_up(COMRAM[3]), start(COMRAM[3]), 
		 -> stop(COMRAM[3]), 

    gpio_pin_direction_initialize@_pin_config	PTR const struct . size(1) Largest target is 5
		 -> control_1(COMRAM[1]), control_2(COMRAM[1]), control_3(COMRAM[1]), control_4(COMRAM[1]), 
		 -> control_5(COMRAM[1]), control_6(COMRAM[1]), dc_motor_intitialize@obj1(COMRAM[1]), dc_motor_intitialize@obj2(COMRAM[1]), 
		 -> led_initialize@obj(COMRAM[1]), pause(COMRAM[3]), Relay_initialize@obj(COMRAM[1]), reset(COMRAM[3]), 
		 -> seg(COMRAM[5]), seg$segment_pin(COMRAM[4]), speed_up(COMRAM[3]), start(COMRAM[3]), 
		 -> stop(COMRAM[3]), 

    gpio_pin_initialize@_pin_config	PTR const struct . size(1) Largest target is 5
		 -> control_1(COMRAM[1]), control_2(COMRAM[1]), control_3(COMRAM[1]), control_4(COMRAM[1]), 
		 -> control_5(COMRAM[1]), control_6(COMRAM[1]), dc_motor_intitialize@obj1(COMRAM[1]), dc_motor_intitialize@obj2(COMRAM[1]), 
		 -> led_initialize@obj(COMRAM[1]), Relay_initialize@obj(COMRAM[1]), seg(COMRAM[5]), seg$segment_pin(COMRAM[4]), 

    gpio_pin_read_logic@_pin_config	PTR const struct . size(1) Largest target is 3
		 -> pause(COMRAM[3]), reset(COMRAM[3]), speed_up(COMRAM[3]), start(COMRAM[3]), 
		 -> stop(COMRAM[3]), 

    gpio_pin_read_logic@logic	PTR enum E2821 size(1) Largest target is 1
		 -> Button_read@button_logic(COMRAM[1]), keypad_get_value@column_logic(COMRAM[1]), 

    gpio_pin_write_logic@_pin_config	PTR const struct . size(1) Largest target is 5
		 -> control_1(COMRAM[1]), control_2(COMRAM[1]), control_3(COMRAM[1]), control_4(COMRAM[1]), 
		 -> control_5(COMRAM[1]), control_6(COMRAM[1]), dc_motor_intitialize@obj1(COMRAM[1]), dc_motor_intitialize@obj2(COMRAM[1]), 
		 -> dc_motor_move_left@obj1(COMRAM[1]), dc_motor_move_left@obj2(COMRAM[1]), dc_motor_move_right@obj1(COMRAM[1]), dc_motor_move_right@obj2(COMRAM[1]), 
		 -> dc_motor_stop@obj1(COMRAM[1]), dc_motor_stop@obj2(COMRAM[1]), led_initialize@obj(COMRAM[1]), led_turn_off@obj(COMRAM[1]), 
		 -> led_turn_on@obj(COMRAM[1]), Relay_initialize@obj(COMRAM[1]), Relay_turn_off@obj(COMRAM[1]), Relay_turn_on@obj(COMRAM[1]), 
		 -> seg(COMRAM[5]), seg$segment_pin(COMRAM[4]), 

    lat_registers	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> LATA(BITBIGSFRll[1]), LATB(BITBIGSFRlh[1]), LATC(BITBIGSFRlh[1]), LATD(BITBIGSFRlh[1]), 
		 -> LATE(BITBIGSFRlh[1]), 

    port_registers	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> PORTA(BITBIGSFRll[1]), PORTB(BITBIGSFRll[1]), PORTC(BITBIGSFRll[1]), PORTD(BITBIGSFRll[1]), 
		 -> PORTE(BITBIGSFRll[1]), 

    segment_inititalize@seg	PTR const struct . size(1) Largest target is 5
		 -> seg(COMRAM[5]), 

    segment_write_number@seg	PTR const struct . size(1) Largest target is 5
		 -> seg(COMRAM[5]), 

    tris_registers	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> TRISA(BITBIGSFRll[1]), TRISB(BITBIGSFRh[1]), TRISC(BITBIGSFRh[1]), TRISD(BITBIGSFRh[1]), 
		 -> TRISE(BITBIGSFRh[1]), 


Critical Paths under _main in COMRAM

    _main->_Button_read
    _main->_application_initialize
    _segment_write_number->___awdiv
    _segment_write_number->_gpio_pin_write_logic
    _application_initialize->_segment_inititalize
    _segment_inititalize->_gpio_pin_initialize
    _gpio_pin_initialize->_gpio_pin_write_logic
    _Button_initialize->_gpio_pin_direction_initialize
    _Button_read->_gpio_pin_read_logic

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0   40447
                                             13 COMRAM     7     7      0
                        _Button_read
                            ___awdiv
                            ___awmod
             _application_initialize
               _gpio_pin_write_logic
               _segment_write_number
 ---------------------------------------------------------------------------------
 (1) _segment_write_number                                 3     1      2    9392
                                              8 COMRAM     3     1      2
                            ___awdiv (ARG)
                            ___awmod (ARG)
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (1) _application_initialize                               1     1      0   18928
                                             12 COMRAM     1     1      0
                  _Button_initialize
                _gpio_pin_initialize
                _segment_inititalize
 ---------------------------------------------------------------------------------
 (2) _segment_inititalize                                  2     1      1    9183
                                             10 COMRAM     2     1      1
                _gpio_pin_initialize
 ---------------------------------------------------------------------------------
 (3) _gpio_pin_initialize                                  3     2      1    8968
                                              8 COMRAM     2     1      1
      _gpio_pin_direction_initialize
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (2) _gpio_pin_write_logic                                 8     6      2    7323
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (2) _Button_initialize                                    2     1      1     765
                                              6 COMRAM     2     1      1
      _gpio_pin_direction_initialize
 ---------------------------------------------------------------------------------
 (4) _gpio_pin_direction_initialize                        7     6      1     316
                                              0 COMRAM     6     5      1
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4    1208
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4    1212
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Button_read                                          5     3      2    1969
                                              8 COMRAM     5     3      2
                _gpio_pin_read_logic
 ---------------------------------------------------------------------------------
 (2) _gpio_pin_read_logic                                  8     6      2     461
                                              0 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Button_read
     _gpio_pin_read_logic
   ___awdiv
   ___awmod
   _application_initialize
     _Button_initialize
       _gpio_pin_direction_initialize
     _gpio_pin_initialize
       _gpio_pin_direction_initialize
       _gpio_pin_write_logic
     _segment_inititalize
       _gpio_pin_initialize
   _gpio_pin_write_logic
   _segment_write_number
     ___awdiv (ARG)
     ___awmod (ARG)
     _gpio_pin_write_logic (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      40        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      34        0.0%
BANK15              80      0       0      35        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     14      61       1       76.4%
BITBIGSFRh          69      0       0      36        0.0%
BITBIGSFRlh          4      0       0      37        0.0%
BITBIGSFRll          4      0       0      38        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      61      39        0.0%
DATA                 0      0      61       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Feb 05 22:06:59 2024

                                      l52 1BB0                                        l45 1C4C  
                                      l97 1CE2                              ___awdiv@sign 0052  
                                     l103 1966                                       l112 1968  
                                     l412 1C00                                       l424 16E2  
                                     l450 1AC0                                       l443 17F2  
                                     l609 1B3A                                       l910 18B6  
                                     l923 1A18                                       _seg 001F  
                                     _ret 0061                              ___awmod@sign 0052  
                             _start_state 004C                       led_initialize@F2894 003F  
                                     wreg 0FE8                                      l2200 1BB2  
                                    l2210 1BFE                                      l2202 1BC2  
                                    l2204 1BE2                                      l2220 1C46  
                                    l2230 1CD4                                      l2206 1BE6  
                                    l2222 1C4A                                      l2214 1C02  
                                    l2240 1A2A                                      l2400 19F2  
                                    l2232 1CDC                                      l2160 1718  
                                    l2216 1C12                                      l2250 1ABE  
                                    l2242 1A4A                                      l2330 17F4  
                                    l2402 19F8                                      l2234 1CE0  
                                    l2226 1CBC                                      l2162 1720  
                                    l2170 17F0                                      l2218 1C1A  
                                    l2244 1A5A                                      l2340 1820  
                                    l2332 17F8                                      l2404 1A08  
                                    l2180 15D4                                      l2228 1CCC  
                                    l2164 1776                                      l2156 16E4  
                                    l2260 1B64                                      l2246 1A62  
                                    l2238 1A1A                                      l2270 18CC  
                                    l2350 184E                                      l2342 1828  
                                    l2334 1806                                      l2406 1A10  
                                    l2190 16A2                                      l2182 15F4  
                                    l2158 16F8                                      l2262 1BAA  
                                    l2254 1B3C                                      l2248 1ABA  
                                    l2280 191A                                      l2272 18DC  
                                    l2360 1888                                      l2352 1856  
                                    l2344 182C                                      l2336 180E  
                                    l2192 16E2                                      l2184 15F8  
                                    l2168 17C6                                      l2328 1AC2  
                                    l2264 1BAE                                      l2256 1B4C  
                                    l2282 1926                                      l2274 18E4  
                                    l2370 18AE                                      l2362 188A  
                                    l2354 1864                                      l2346 1834  
                                    l2338 1812                                      l2186 164E  
                                    l2178 15C4                                      l2258 1B5C  
                                    l2292 1962                                      l2284 1934  
                                    l2276 18F0                                      l2268 18B8  
                                    l2364 1890                                      l2356 186A  
                                    l2348 1846                                      l2380 1984  
                                    l2188 169E                                      l2700 13C8  
                                    l2620 102C                                      l2612 1012  
                                    l2286 194E                                      l2278 190A  
                                    l2358 1880                                      l2366 1896  
                                    l2390 19B8                                      l2382 1988  
                                    l2374 196A                                      l2710 1460  
                                    l2702 13D6                                      l2630 1068  
                                    l2622 103C                                      l2614 1016  
                                    l2368 18A6                                      l2392 19C0  
                                    l2384 1996                                      l2376 196E  
                                    l2720 14AA                                      l2712 146E  
                                    l2704 13F6                                      l2640 10E2  
                                    l2632 1076                                      l2624 1040  
                                    l2616 101A                                      l2394 19CE  
                                    l2386 199E                                      l2378 197C  
                                    l2730 151A                                      l2722 14BA  
                                    l2714 147C                                      l2706 1442  
                                    l2650 118A                                      l2642 112E  
                                    l2634 10A6                                      l2626 1050  
                                    l2618 101E                                      l2396 19E4  
                                    l2388 19B0                                      l2740 1556  
                                    l2732 1528                                      l2724 150E  
                                    l2716 148C                                      l2708 1452  
                                    l2660 1222                                      l2652 1198  
                                    l2644 113E                                      l2636 10B4  
                                    l2628 1058                                      l2398 19EC  
                                    l2750 158A                                      l2742 1562  
                                    l2726 1512                                      l2718 149C  
                                    l2670 1266                                      l2662 1230  
                                    l2654 11A6                                      l2646 114C  
                                    l2638 10C2                                      l2760 15A8  
                                    l2752 158C                                      l2728 1516  
                                    l2736 1538                                      l2680 12A6  
                                    l2672 126A                                      l2664 123E  
                                    l2656 11C6                                      l2648 115A  
                                    l2744 1564                                      l2762 15B8  
                                    l2754 1590                                      l2738 1546  
                                    l2690 135E                                      l2682 12D6  
                                    l2674 1278                                      l2666 124E  
                                    l2658 1212                                      l2746 1576  
                                    l2860 17DA                                      l2756 15A2  
                                    l2748 1578                                      l2692 136E  
                                    l2684 12E4                                      l2676 1288  
                                    l2668 1256                                      l2862 16CC  
                                    l2758 15A4                                      l2694 137C  
                                    l2686 12F2                                      l2678 1298  
                                    l2696 138A                                      l2688 1312  
                                    l2698 13BA                                      u1100 15F4  
                                    u1101 15F0                                      u1200 1A4A  
                                    u1201 1A46                                      u1210 1A5A  
                                    u1130 16B8                                      u1114 1616  
                                    u1050 16F8                                      u1211 1A56  
                                    u1131 16B2                                      u1115 1612  
                                    u1051 16F4                                      u1300 195E  
                                    u1140 16BA                                      u1124 166C  
                                    u1060 1718                                      u1301 195A  
                                    u1125 1668                                      u1061 1714  
                                    u1150 1BC2                                      u1230 1B4C  
                                    u1151 1BBE                                      u1231 1B48  
                                    u2007 128E                                      u1224 1AAE  
                                    u1400 18A6                                      u1160 1BE2  
                                    u1240 1B5C                                      u1225 1AAA  
                                    u1401 18A2                                      u1161 1BDE  
                                    u1241 1B58                                      u2017 12CC  
                                    u1250 18CC                                      u1410 197C  
                                    u1090 15D4                                      u1074 173E  
                                    u1170 1C12                                      u1251 18C8  
                                    u1411 1978                                      u1091 15D0  
                                    u1075 173A                                      u1171 1C0E  
                                    u2027 1318                                      u1260 18DC  
                                    u1420 1996                                      u1180 1CCC  
                                    u1084 1794                                      u1261 18D8  
                                    u1421 1992                                      u1181 1CC8  
                                    u1085 1790                                      u2037 1364  
                                    _LATA 0F89                                      u1190 1A2A  
                                    u1270 190A                                      u1350 1806  
                                    u1430 19B0                                      _LATB 0F8A  
                                    u1191 1A26                                      u1271 1906  
                                    u1351 1802                                      u1431 19AC  
                                    u2047 13B0                                      _LATC 0F8B  
                                    u1280 191A                                      u1360 1820  
                                    u1440 19CE                                      _LATD 0F8C  
                                    u1281 1916                                      u1361 181C  
                                    u1441 19CA                                      u2057 13FC  
                                    _LATE 0F8D                                      u1290 194E  
                                    u1370 1846                                      u1450 19E4  
                                    u1291 194A                                      u1371 1842  
                                    u1451 19E0                                      u2067 1448  
                                    u1380 1864                                      u1460 1A08  
                                    u1700 103C                                      u1381 1860  
                                    u1461 1A04                                      u1701 1038  
                                    u1390 1880                                      u1710 1050  
                                    u1391 187C                                      u1711 104C  
                                    u1800 1576                                      u1720 124E  
                                    u1801 1572                                      u1721 124A  
                                    u1810 158A                                      u1730 1266  
                                    u1811 1586                                      u1731 1262  
                                    u1820 15A2                                      u1740 1288  
                                    u1821 159E                                      u1741 1284  
                                    u1830 15B8                                      u1750 148C  
                                    u1831 15B4                                      u1751 1488  
                                    u1760 149C                                      u1761 1498  
                             main@counter 005B                                      u1770 14BA  
                                    u1771 14B6                                      u1780 1538  
                                    u1781 1534                                      u1790 1556  
                                    u1791 1552                                      u1937 105E  
                                    u1947 109C                                      u1957 10E8  
                                    u1967 1134                                      u1977 1180  
                                    u1987 11CC                                      u1997 1218  
                             main@minutes 005F                               main@seconds 005E  
          gpio_pin_read_logic@_pin_config 004D                                      _main 1012  
                                    fsr1h 0FE2                                      fsr2h 0FDA  
                                    indf1 0FE7                                      indf2 0FDF  
                                    fsr1l 0FE1                                      fsr2l 0FD9  
                                    _stop 002D                                      prodl 0FF3  
                                    start 0000                              ___param_bank 0000  
                    _gpio_pin_write_logic 16E4                                     ?_main 004D  
                ??_application_initialize 0059                             ??_Button_read 0057  
                         __end_of___awdiv 18B8                           __end_of___awmod 1A1A  
                         ___awdiv@divisor 004F                           ___awdiv@counter 0051  
                                   _PORTA 0F80                                     _PORTB 0F81  
                                   _PORTC 0F82                                     _PORTD 0F83  
                                   _PORTE 0F84                                     _TRISA 0F92  
                                   _TRISB 0F93                                     _TRISC 0F94  
                                   _TRISD 0F95                                     _TRISE 0F96  
                                   _pause 0027                                     _reset 0024  
                                   _start 0030                                     tablat 0FF5  
                                   status 0FD8                       _segment_inititalize 1C02  
          ?_gpio_pin_direction_initialize 004D                           __initialization 1C86  
                            __end_of_main 15C4                     ?_gpio_pin_write_logic 004D  
                gpio_pin_read_logic@logic 004E                             _lat_registers 000B  
                                  ??_main 005A                      ?_segment_inititalize 0057  
                           __activetblptr 0002                          led_turn_on@F2899 003E  
                          Button_read@_st 0056                            Button_read@btn 0055  
                          Button_read@ret 0058                       __end_of_Button_read 196A  
                        ___awdiv@dividend 004D                                 ??___awdiv 0051  
                               ??___awmod 0051                                    clear_0 1CAC  
                        ___awdiv@quotient 0053                           ___awmod@divisor 004F  
                                  isa$std 0001                     ??_segment_inititalize 0058  
                         ___awmod@counter 0051                              __pdataCOMRAM 0001  
                  segment_inititalize@seg 0057                    segment_inititalize@ret 0058  
                            __mediumconst 0000                                    tblptrh 0FF7  
                                  tblptrl 0FF6                                    tblptru 0FF8  
                              __accesstop 0080                   __end_of__initialization 1CB2  
                           ___rparam_used 0001                    ??_gpio_pin_write_logic 004F  
                          __pcstackCOMRAM 004D  gpio_pin_direction_initialize@_pin_config 004D  
                             _Button_read 18B8                            main@delay_time 005D  
                  _application_initialize 1AC2                                __pnvCOMRAM 0061  
                       led_turn_off@F2904 003D                           led_toggle@F2909 003C  
                dc_motor_move_right@F2900 0045                  dc_motor_move_right@F2902 0044  
                           _keypad_values 1001                            _tris_registers 0015  
                                 __Hparam 0000                                   __Lparam 0000  
                     _gpio_pin_initialize 1BB2                       _gpio_pin_read_logic 1A1A  
                                 ___awdiv 17F4                                   ___awmod 196A  
                            __psmallconst 1000                                   __pcinit 1C86  
                                 __ramtop 1000                                   __ptext0 1012  
                                 __ptext1 1B3C                                   __ptext2 1AC2  
                                 __ptext3 1C02                                   __ptext4 1BB2  
                                 __ptext5 16E4                                   __ptext6 1CBC  
                                 __ptext7 15C4                                   __ptext8 196A  
                                 __ptext9 17F4           ??_gpio_pin_direction_initialize 004E  
                        ___awmod@dividend 004D                      ?_gpio_pin_initialize 0055  
                    ?_gpio_pin_read_logic 004D                      end_of_initialization 1CB2  
                           __Lmediumconst 0000                        dc_motor_stop@F2914 0041  
                      dc_motor_stop@F2916 0040                                   postdec1 0FE5  
                                 postdec2 0FDD                                   postinc0 0FEE  
                                 postinc1 0FE6                                   postinc2 0FDE  
                          main@start_flag 005C                 dc_motor_intitialize@F2893 0047  
               dc_motor_intitialize@F2895 0046                     ??_gpio_pin_initialize 0056  
                       _Button_initialize 1CBC                     ??_gpio_pin_read_logic 004F  
                      ?_Button_initialize 0053                       ??_Button_initialize 0054  
                              _stop_state 004B               __end_of_segment_inititalize 1C4E  
                           __pidataCOMRAM 1C4E                              ?_Button_read 0055  
               __end_of_Button_initialize 1CE4                       start_initialization 1C86  
   __end_of_gpio_pin_direction_initialize 16E4             _gpio_pin_direction_initialize 15C4  
                 ?_application_initialize 004D                   dc_motor_move_left@F2907 0043  
                 dc_motor_move_left@F2909 0042                      Button_initialize@btn 0053  
            __end_of_segment_write_number 1BB2                      Button_initialize@ret 0054  
                             __pbssCOMRAM 0039            __end_of_application_initialize 1B3C  
                   Relay_initialize@F2890 003B           gpio_pin_write_logic@_pin_config 004D  
                                ?___awdiv 004D                                  ?___awmod 004D  
               gpio_pin_write_logic@logic 004E                               __smallconst 1000  
                               _control_1 0038                                 _control_2 0037  
                               _control_3 0036                                 _control_4 0035  
                               _control_5 0034                                 _control_6 0033  
                     Relay_turn_off@F2900 0039                                 main@hours 0060  
                    _segment_write_number 1B3C                   segment_write_number@seg 0055  
                 segment_write_number@ret 0057                   gpio_pin_write_logic@ret 0054  
                               copy_data0 1C9A                    gpio_pin_read_logic@ret 0054  
                                __Hrparam 0000                                  __Lrparam 0000  
                 Button_read@button_logic 0059               __end_of_gpio_pin_initialize 1C02  
             __end_of_gpio_pin_read_logic 1AC2            gpio_pin_initialize@_pin_config 0055  
                   ?_segment_write_number 0055                                  __ptext10 18B8  
                                __ptext11 1A1A                        Relay_turn_on@F2895 003A  
                                isa$xinst 0000                                  _speed_up 002A  
                             _pause_state 0049                     __end_of_keypad_values 1011  
            __end_of_gpio_pin_write_logic 17F4                segment_write_number@number 0056  
                             _reset_state 004A                    ??_segment_write_number 0057  
               application_initialize@ret 0059                            _port_registers 0001  
                             _speed_state 0048  
